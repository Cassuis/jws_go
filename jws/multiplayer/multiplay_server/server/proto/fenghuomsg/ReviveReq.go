// automatically generated by the FlatBuffers compiler, do not modify

package fenghuomsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReviveReq struct {
	_tab flatbuffers.Table
}

func GetRootAsReviveReq(buf []byte, offset flatbuffers.UOffsetT) *ReviveReq {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReviveReq{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ReviveReq) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///玩家账号ID
func (rcv *ReviveReq) AccountId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家账号ID
///房间密码
func (rcv *ReviveReq) Hp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///房间密码
func (rcv *ReviveReq) MutateHp(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ReviveReq) Idx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReviveReq) MutateIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func ReviveReqStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ReviveReqAddAccountId(builder *flatbuffers.Builder, accountId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(accountId), 0)
}
func ReviveReqAddHp(builder *flatbuffers.Builder, hp int32) {
	builder.PrependInt32Slot(1, hp, 0)
}
func ReviveReqAddIdx(builder *flatbuffers.Builder, idx int32) {
	builder.PrependInt32Slot(2, idx, 0)
}
func ReviveReqEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
