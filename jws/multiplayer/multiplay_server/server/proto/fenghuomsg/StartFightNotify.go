// automatically generated by the FlatBuffers compiler, do not modify

package fenghuomsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// [Notify][Push]
/// 进入房间后,可以开始战斗时Notify信号通知服务器
/// 服务器任何可以战斗的时候Push信号到客户端
type StartFightNotify struct {
	_tab flatbuffers.Table
}

func GetRootAsStartFightNotify(buf []byte, offset flatbuffers.UOffsetT) *StartFightNotify {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StartFightNotify{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *StartFightNotify) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///当前战斗小关
func (rcv *StartFightNotify) Sublevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///当前战斗小关
func (rcv *StartFightNotify) MutateSublevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

///玩家血量
func (rcv *StartFightNotify) Hps(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *StartFightNotify) HpsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家血量
///敌兵所有血量
func (rcv *StartFightNotify) EnemiesHp(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *StartFightNotify) EnemiesHpLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///敌兵所有血量
func StartFightNotifyStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func StartFightNotifyAddSublevel(builder *flatbuffers.Builder, sublevel int32) {
	builder.PrependInt32Slot(0, sublevel, 0)
}
func StartFightNotifyAddHps(builder *flatbuffers.Builder, Hps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Hps), 0)
}
func StartFightNotifyStartHpsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StartFightNotifyAddEnemiesHp(builder *flatbuffers.Builder, enemiesHp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(enemiesHp), 0)
}
func StartFightNotifyStartEnemiesHpVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StartFightNotifyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
