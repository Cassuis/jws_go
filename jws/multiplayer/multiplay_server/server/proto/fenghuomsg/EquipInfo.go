// automatically generated by the FlatBuffers compiler, do not modify

package fenghuomsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// 玩家装备数据
type EquipInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsEquipInfo(buf []byte, offset flatbuffers.UOffsetT) *EquipInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EquipInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *EquipInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///当前战斗状态(等待开始\已开始\已结束)
func (rcv *EquipInfo) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///当前战斗状态(等待开始\已开始\已结束)
func (rcv *EquipInfo) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *EquipInfo) Tableid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EquipInfo) Itemid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///战斗难度
func (rcv *EquipInfo) Count() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///战斗难度
func (rcv *EquipInfo) MutateCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

///战斗场景信息
func (rcv *EquipInfo) Data() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///战斗场景信息
func EquipInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func EquipInfoAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func EquipInfoAddTableid(builder *flatbuffers.Builder, tableid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tableid), 0)
}
func EquipInfoAddItemid(builder *flatbuffers.Builder, itemid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(itemid), 0)
}
func EquipInfoAddCount(builder *flatbuffers.Builder, count int64) {
	builder.PrependInt64Slot(3, count, 0)
}
func EquipInfoAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(data), 0)
}
func EquipInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
