// automatically generated by the FlatBuffers compiler, do not modify

package fenghuomsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// [Notify]客户端通知服务器伤害\损失HP通知
type HPNotify struct {
	_tab flatbuffers.Table
}

func GetRootAsHPNotify(buf []byte, offset flatbuffers.UOffsetT) *HPNotify {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HPNotify{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *HPNotify) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///玩家账号ID
func (rcv *HPNotify) Myidx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家账号ID
func (rcv *HPNotify) MutateMyidx(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

///玩家自身血量变化
func (rcv *HPNotify) MyHpD() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家自身血量变化
func (rcv *HPNotify) MutateMyHpD(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

///玩家对敌兵造成的血量变化
func (rcv *HPNotify) EnemiesHpD(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *HPNotify) EnemiesHpDLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家对敌兵造成的血量变化
func HPNotifyStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func HPNotifyAddMyidx(builder *flatbuffers.Builder, myidx int32) {
	builder.PrependInt32Slot(0, myidx, 0)
}
func HPNotifyAddMyHpD(builder *flatbuffers.Builder, myHpD int32) {
	builder.PrependInt32Slot(1, myHpD, 0)
}
func HPNotifyAddEnemiesHpD(builder *flatbuffers.Builder, enemiesHpD flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(enemiesHpD), 0)
}
func HPNotifyStartEnemiesHpDVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HPNotifyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
