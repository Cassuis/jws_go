// automatically generated by the FlatBuffers compiler, do not modify

package fenghuomsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Packet struct {
	_tab flatbuffers.Table
}

func GetRootAsPacket(buf []byte, offset flatbuffers.UOffsetT) *Packet {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Packet{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Packet) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Packet) Typ() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Packet) MutateTyp(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Packet) Number() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Packet) MutateNumber(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *Packet) Code() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Packet) MutateCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Packet) DataType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Packet) MutateDataType(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *Packet) Data(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func PacketStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func PacketAddTyp(builder *flatbuffers.Builder, typ int32) {
	builder.PrependInt32Slot(0, typ, 0)
}
func PacketAddNumber(builder *flatbuffers.Builder, number int64) {
	builder.PrependInt64Slot(1, number, 0)
}
func PacketAddCode(builder *flatbuffers.Builder, code int32) {
	builder.PrependInt32Slot(2, code, 0)
}
func PacketAddDataType(builder *flatbuffers.Builder, dataType byte) {
	builder.PrependByteSlot(3, dataType, 0)
}
func PacketAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(data), 0)
}
func PacketEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
