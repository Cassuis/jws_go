// automatically generated by the FlatBuffers compiler, do not modify

namespace fenghuomsg
{

using System;
using FlatBuffers;

///玩家数据(结构上和客户端获取到的Account2Client一致)
public sealed class AccountInfo : Table {
  public static AccountInfo GetRootAsAccountInfo(ByteBuffer _bb) { return GetRootAsAccountInfo(_bb, new AccountInfo()); }
  public static AccountInfo GetRootAsAccountInfo(ByteBuffer _bb, AccountInfo obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public AccountInfo __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  ///玩家的IDX 对应状态信息中的位置
  public int Idx { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///玩家AccountID
  public string AccountId { get { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetAccountIdBytes() { return __vector_as_arraysegment(6); }
  ///当前玩家角色
  public int AvatarId { get { int o = __offset(8); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///战队等级
  public uint CorpLv { get { int o = __offset(10); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  ///战队经验
  public uint CorpXp { get { int o = __offset(12); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  ///玩家角色觉醒等级
  public uint GetArousals(int j) { int o = __offset(14); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int ArousalsLength { get { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetArousalsBytes() { return __vector_as_arraysegment(14); }
  ///玩家技能等级
  public uint GetSkills(int j) { int o = __offset(16); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int SkillsLength { get { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSkillsBytes() { return __vector_as_arraysegment(16); }
  ///玩家修炼技能等级
  public uint GetSkillps(int j) { int o = __offset(18); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int SkillpsLength { get { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSkillpsBytes() { return __vector_as_arraysegment(18); }
  ///
  public uint GetHeroStar(int j) { int o = __offset(20); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int HeroStarLength { get { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHeroStarBytes() { return __vector_as_arraysegment(20); }
  public uint GetHeroLv(int j) { int o = __offset(22); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int HeroLvLength { get { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHeroLvBytes() { return __vector_as_arraysegment(22); }
  ///玩家昵称
  public string Name { get { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __vector_as_arraysegment(24); }
  ///玩家vip等级
  public uint Vip { get { int o = __offset(26); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  ///玩家已解锁角色
  public int GetAvatarlockeds(int j) { int o = __offset(28); return o != 0 ? bb.GetInt(__vector(o) + j * 4) : (int)0; }
  public int AvatarlockedsLength { get { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAvatarlockedsBytes() { return __vector_as_arraysegment(28); }
  ///玩家战队战力
  public int Gs { get { int o = __offset(30); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///pvp积分
  public long PvpScore { get { int o = __offset(32); return o != 0 ? bb.GetLong(o + bb_pos) : (long)0; } }
  ///pvp等级
  public int PvpRank { get { int o = __offset(34); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///玩家装备
  public EquipInfo GetEquips(int j) { return GetEquips(new EquipInfo(), j); }
  public EquipInfo GetEquips(EquipInfo obj, int j) { int o = __offset(36); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int EquipsLength { get { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; } }
  ///装备强化等级
  public uint GetEquipUpgrade(int j) { int o = __offset(38); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int EquipUpgradeLength { get { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEquipUpgradeBytes() { return __vector_as_arraysegment(38); }
  ///装备升星等级
  public uint GetEquipStar(int j) { int o = __offset(40); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int EquipStarLength { get { int o = __offset(40); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEquipStarBytes() { return __vector_as_arraysegment(40); }
  ///玩家当前时装
  public uint GetAvatarEquips(int j) { int o = __offset(42); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int AvatarEquipsLength { get { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAvatarEquipsBytes() { return __vector_as_arraysegment(42); }
  ///玩家所有的时装
  public FashionItemInfo GetAllFashions(int j) { return GetAllFashions(new FashionItemInfo(), j); }
  public FashionItemInfo GetAllFashions(FashionItemInfo obj, int j) { int o = __offset(44); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int AllFashionsLength { get { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; } }
  ///玩家当前副将
  public string GetGenerals(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int GeneralsLength { get { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; } }
  ///玩家当前副将星级
  public uint GetGenstar(int j) { int o = __offset(48); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int GenstarLength { get { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetGenstarBytes() { return __vector_as_arraysegment(48); }
  ///玩家副将羁绊
  public string GetGenrels(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int GenrelsLength { get { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; } }
  ///玩家副将羁绊等级
  public uint GetGenrellv(int j) { int o = __offset(52); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int GenrellvLength { get { int o = __offset(52); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetGenrellvBytes() { return __vector_as_arraysegment(52); }
  ///玩家角色宝石
  public string GetAvatarJade(int j) { int o = __offset(54); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int AvatarJadeLength { get { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; } }
  ///玩家神将宝石
  public string GetDestGeneralJade(int j) { int o = __offset(56); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int DestGeneralJadeLength { get { int o = __offset(56); return o != 0 ? __vector_len(o) : 0; } }
  ///玩家当前最高神兽ID
  public int Dg { get { int o = __offset(58); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///玩家当前最高神兽等级
  public int Dglv { get { int o = __offset(60); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///玩家神兽技能
  public int GetDgss(int j) { int o = __offset(62); return o != 0 ? bb.GetInt(__vector(o) + j * 4) : (int)0; }
  public int DgssLength { get { int o = __offset(62); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDgssBytes() { return __vector_as_arraysegment(62); }
  ///玩家公会uuid
  public string Guuid { get { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetGuuidBytes() { return __vector_as_arraysegment(64); }
  ///玩家公会名称
  public string Gname { get { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetGnameBytes() { return __vector_as_arraysegment(66); }
  ///玩家公会职务
  public int Gpos { get { int o = __offset(68); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///玩家官阶
  public string Post { get { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetPostBytes() { return __vector_as_arraysegment(70); }
  ///玩家官阶过期时间
  public long Postt { get { int o = __offset(72); return o != 0 ? bb.GetLong(o + bb_pos) : (long)0; } }
  /// 主将被动技能
  public string GetPskillid(int j) { int o = __offset(74); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int PskillidLength { get { int o = __offset(74); return o != 0 ? __vector_len(o) : 0; } }
  public string GetCskillid(int j) { int o = __offset(76); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int CskillidLength { get { int o = __offset(76); return o != 0 ? __vector_len(o) : 0; } }
  public string GetTskillid(int j) { int o = __offset(78); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int TskillidLength { get { int o = __offset(78); return o != 0 ? __vector_len(o) : 0; } }
  public string Title { get { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetTitleBytes() { return __vector_as_arraysegment(80); }
  public string GetTitles(int j) { int o = __offset(82); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int TitlesLength { get { int o = __offset(82); return o != 0 ? __vector_len(o) : 0; } }
  public Attr HeroAttr { get { return GetHeroAttr(new Attr()); } }
  public Attr GetHeroAttr(Attr obj) { int o = __offset(84); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  ///玩家当前角色神翼
  public int HeroSwing { get { int o = __offset(86); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<AccountInfo> CreateAccountInfo(FlatBufferBuilder builder,
      int idx = 0,
      StringOffset accountIdOffset = default(StringOffset),
      int avatarId = 0,
      uint corpLv = 0,
      uint corpXp = 0,
      VectorOffset arousalsOffset = default(VectorOffset),
      VectorOffset skillsOffset = default(VectorOffset),
      VectorOffset skillpsOffset = default(VectorOffset),
      VectorOffset heroStarOffset = default(VectorOffset),
      VectorOffset heroLvOffset = default(VectorOffset),
      StringOffset nameOffset = default(StringOffset),
      uint vip = 0,
      VectorOffset avatarlockedsOffset = default(VectorOffset),
      int gs = 0,
      long pvpScore = 0,
      int pvpRank = 0,
      VectorOffset equipsOffset = default(VectorOffset),
      VectorOffset equipUpgradeOffset = default(VectorOffset),
      VectorOffset equipStarOffset = default(VectorOffset),
      VectorOffset avatarEquipsOffset = default(VectorOffset),
      VectorOffset allFashionsOffset = default(VectorOffset),
      VectorOffset generalsOffset = default(VectorOffset),
      VectorOffset genstarOffset = default(VectorOffset),
      VectorOffset genrelsOffset = default(VectorOffset),
      VectorOffset genrellvOffset = default(VectorOffset),
      VectorOffset avatarJadeOffset = default(VectorOffset),
      VectorOffset destGeneralJadeOffset = default(VectorOffset),
      int dg = 0,
      int dglv = 0,
      VectorOffset dgssOffset = default(VectorOffset),
      StringOffset guuidOffset = default(StringOffset),
      StringOffset gnameOffset = default(StringOffset),
      int gpos = 0,
      StringOffset postOffset = default(StringOffset),
      long postt = 0,
      VectorOffset pskillidOffset = default(VectorOffset),
      VectorOffset cskillidOffset = default(VectorOffset),
      VectorOffset tskillidOffset = default(VectorOffset),
      StringOffset titleOffset = default(StringOffset),
      VectorOffset titlesOffset = default(VectorOffset),
      Offset<Attr> heroAttrOffset = default(Offset<Attr>),
      int heroSwing = 0) {
    builder.StartObject(42);
    AccountInfo.AddPostt(builder, postt);
    AccountInfo.AddPvpScore(builder, pvpScore);
    AccountInfo.AddHeroSwing(builder, heroSwing);
    AccountInfo.AddHeroAttr(builder, heroAttrOffset);
    AccountInfo.AddTitles(builder, titlesOffset);
    AccountInfo.AddTitle(builder, titleOffset);
    AccountInfo.AddTskillid(builder, tskillidOffset);
    AccountInfo.AddCskillid(builder, cskillidOffset);
    AccountInfo.AddPskillid(builder, pskillidOffset);
    AccountInfo.AddPost(builder, postOffset);
    AccountInfo.AddGpos(builder, gpos);
    AccountInfo.AddGname(builder, gnameOffset);
    AccountInfo.AddGuuid(builder, guuidOffset);
    AccountInfo.AddDgss(builder, dgssOffset);
    AccountInfo.AddDglv(builder, dglv);
    AccountInfo.AddDg(builder, dg);
    AccountInfo.AddDestGeneralJade(builder, destGeneralJadeOffset);
    AccountInfo.AddAvatarJade(builder, avatarJadeOffset);
    AccountInfo.AddGenrellv(builder, genrellvOffset);
    AccountInfo.AddGenrels(builder, genrelsOffset);
    AccountInfo.AddGenstar(builder, genstarOffset);
    AccountInfo.AddGenerals(builder, generalsOffset);
    AccountInfo.AddAllFashions(builder, allFashionsOffset);
    AccountInfo.AddAvatarEquips(builder, avatarEquipsOffset);
    AccountInfo.AddEquipStar(builder, equipStarOffset);
    AccountInfo.AddEquipUpgrade(builder, equipUpgradeOffset);
    AccountInfo.AddEquips(builder, equipsOffset);
    AccountInfo.AddPvpRank(builder, pvpRank);
    AccountInfo.AddGs(builder, gs);
    AccountInfo.AddAvatarlockeds(builder, avatarlockedsOffset);
    AccountInfo.AddVip(builder, vip);
    AccountInfo.AddName(builder, nameOffset);
    AccountInfo.AddHeroLv(builder, heroLvOffset);
    AccountInfo.AddHeroStar(builder, heroStarOffset);
    AccountInfo.AddSkillps(builder, skillpsOffset);
    AccountInfo.AddSkills(builder, skillsOffset);
    AccountInfo.AddArousals(builder, arousalsOffset);
    AccountInfo.AddCorpXp(builder, corpXp);
    AccountInfo.AddCorpLv(builder, corpLv);
    AccountInfo.AddAvatarId(builder, avatarId);
    AccountInfo.AddAccountId(builder, accountIdOffset);
    AccountInfo.AddIdx(builder, idx);
    return AccountInfo.EndAccountInfo(builder);
  }

  public static void StartAccountInfo(FlatBufferBuilder builder) { builder.StartObject(42); }
  public static void AddIdx(FlatBufferBuilder builder, int idx) { builder.AddInt(0, idx, 0); }
  public static void AddAccountId(FlatBufferBuilder builder, StringOffset accountIdOffset) { builder.AddOffset(1, accountIdOffset.Value, 0); }
  public static void AddAvatarId(FlatBufferBuilder builder, int avatarId) { builder.AddInt(2, avatarId, 0); }
  public static void AddCorpLv(FlatBufferBuilder builder, uint corpLv) { builder.AddUint(3, corpLv, 0); }
  public static void AddCorpXp(FlatBufferBuilder builder, uint corpXp) { builder.AddUint(4, corpXp, 0); }
  public static void AddArousals(FlatBufferBuilder builder, VectorOffset arousalsOffset) { builder.AddOffset(5, arousalsOffset.Value, 0); }
  public static VectorOffset CreateArousalsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartArousalsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkills(FlatBufferBuilder builder, VectorOffset skillsOffset) { builder.AddOffset(6, skillsOffset.Value, 0); }
  public static VectorOffset CreateSkillsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartSkillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkillps(FlatBufferBuilder builder, VectorOffset skillpsOffset) { builder.AddOffset(7, skillpsOffset.Value, 0); }
  public static VectorOffset CreateSkillpsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartSkillpsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHeroStar(FlatBufferBuilder builder, VectorOffset heroStarOffset) { builder.AddOffset(8, heroStarOffset.Value, 0); }
  public static VectorOffset CreateHeroStarVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartHeroStarVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHeroLv(FlatBufferBuilder builder, VectorOffset heroLvOffset) { builder.AddOffset(9, heroLvOffset.Value, 0); }
  public static VectorOffset CreateHeroLvVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartHeroLvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(10, nameOffset.Value, 0); }
  public static void AddVip(FlatBufferBuilder builder, uint vip) { builder.AddUint(11, vip, 0); }
  public static void AddAvatarlockeds(FlatBufferBuilder builder, VectorOffset avatarlockedsOffset) { builder.AddOffset(12, avatarlockedsOffset.Value, 0); }
  public static VectorOffset CreateAvatarlockedsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAvatarlockedsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGs(FlatBufferBuilder builder, int gs) { builder.AddInt(13, gs, 0); }
  public static void AddPvpScore(FlatBufferBuilder builder, long pvpScore) { builder.AddLong(14, pvpScore, 0); }
  public static void AddPvpRank(FlatBufferBuilder builder, int pvpRank) { builder.AddInt(15, pvpRank, 0); }
  public static void AddEquips(FlatBufferBuilder builder, VectorOffset equipsOffset) { builder.AddOffset(16, equipsOffset.Value, 0); }
  public static VectorOffset CreateEquipsVector(FlatBufferBuilder builder, Offset<EquipInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartEquipsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquipUpgrade(FlatBufferBuilder builder, VectorOffset equipUpgradeOffset) { builder.AddOffset(17, equipUpgradeOffset.Value, 0); }
  public static VectorOffset CreateEquipUpgradeVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartEquipUpgradeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquipStar(FlatBufferBuilder builder, VectorOffset equipStarOffset) { builder.AddOffset(18, equipStarOffset.Value, 0); }
  public static VectorOffset CreateEquipStarVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartEquipStarVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAvatarEquips(FlatBufferBuilder builder, VectorOffset avatarEquipsOffset) { builder.AddOffset(19, avatarEquipsOffset.Value, 0); }
  public static VectorOffset CreateAvatarEquipsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartAvatarEquipsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllFashions(FlatBufferBuilder builder, VectorOffset allFashionsOffset) { builder.AddOffset(20, allFashionsOffset.Value, 0); }
  public static VectorOffset CreateAllFashionsVector(FlatBufferBuilder builder, Offset<FashionItemInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartAllFashionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGenerals(FlatBufferBuilder builder, VectorOffset generalsOffset) { builder.AddOffset(21, generalsOffset.Value, 0); }
  public static VectorOffset CreateGeneralsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartGeneralsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGenstar(FlatBufferBuilder builder, VectorOffset genstarOffset) { builder.AddOffset(22, genstarOffset.Value, 0); }
  public static VectorOffset CreateGenstarVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartGenstarVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGenrels(FlatBufferBuilder builder, VectorOffset genrelsOffset) { builder.AddOffset(23, genrelsOffset.Value, 0); }
  public static VectorOffset CreateGenrelsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartGenrelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGenrellv(FlatBufferBuilder builder, VectorOffset genrellvOffset) { builder.AddOffset(24, genrellvOffset.Value, 0); }
  public static VectorOffset CreateGenrellvVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartGenrellvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAvatarJade(FlatBufferBuilder builder, VectorOffset avatarJadeOffset) { builder.AddOffset(25, avatarJadeOffset.Value, 0); }
  public static VectorOffset CreateAvatarJadeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartAvatarJadeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDestGeneralJade(FlatBufferBuilder builder, VectorOffset destGeneralJadeOffset) { builder.AddOffset(26, destGeneralJadeOffset.Value, 0); }
  public static VectorOffset CreateDestGeneralJadeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDestGeneralJadeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDg(FlatBufferBuilder builder, int dg) { builder.AddInt(27, dg, 0); }
  public static void AddDglv(FlatBufferBuilder builder, int dglv) { builder.AddInt(28, dglv, 0); }
  public static void AddDgss(FlatBufferBuilder builder, VectorOffset dgssOffset) { builder.AddOffset(29, dgssOffset.Value, 0); }
  public static VectorOffset CreateDgssVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDgssVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGuuid(FlatBufferBuilder builder, StringOffset guuidOffset) { builder.AddOffset(30, guuidOffset.Value, 0); }
  public static void AddGname(FlatBufferBuilder builder, StringOffset gnameOffset) { builder.AddOffset(31, gnameOffset.Value, 0); }
  public static void AddGpos(FlatBufferBuilder builder, int gpos) { builder.AddInt(32, gpos, 0); }
  public static void AddPost(FlatBufferBuilder builder, StringOffset postOffset) { builder.AddOffset(33, postOffset.Value, 0); }
  public static void AddPostt(FlatBufferBuilder builder, long postt) { builder.AddLong(34, postt, 0); }
  public static void AddPskillid(FlatBufferBuilder builder, VectorOffset pskillidOffset) { builder.AddOffset(35, pskillidOffset.Value, 0); }
  public static VectorOffset CreatePskillidVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPskillidVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCskillid(FlatBufferBuilder builder, VectorOffset cskillidOffset) { builder.AddOffset(36, cskillidOffset.Value, 0); }
  public static VectorOffset CreateCskillidVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartCskillidVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTskillid(FlatBufferBuilder builder, VectorOffset tskillidOffset) { builder.AddOffset(37, tskillidOffset.Value, 0); }
  public static VectorOffset CreateTskillidVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTskillidVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(38, titleOffset.Value, 0); }
  public static void AddTitles(FlatBufferBuilder builder, VectorOffset titlesOffset) { builder.AddOffset(39, titlesOffset.Value, 0); }
  public static VectorOffset CreateTitlesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTitlesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHeroAttr(FlatBufferBuilder builder, Offset<Attr> heroAttrOffset) { builder.AddOffset(40, heroAttrOffset.Value, 0); }
  public static void AddHeroSwing(FlatBufferBuilder builder, int heroSwing) { builder.AddInt(41, heroSwing, 0); }
  public static Offset<AccountInfo> EndAccountInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AccountInfo>(o);
  }
  public static void FinishAccountInfoBuffer(FlatBufferBuilder builder, Offset<AccountInfo> offset) { builder.Finish(offset.Value); }
};


}
