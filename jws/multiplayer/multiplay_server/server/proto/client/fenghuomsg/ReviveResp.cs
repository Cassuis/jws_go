// automatically generated by the FlatBuffers compiler, do not modify

namespace fenghuomsg
{

using System;
using FlatBuffers;

public sealed class ReviveResp : Table {
  public static ReviveResp GetRootAsReviveResp(ByteBuffer _bb) { return GetRootAsReviveResp(_bb, new ReviveResp()); }
  public static ReviveResp GetRootAsReviveResp(ByteBuffer _bb, ReviveResp obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public ReviveResp __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  ///玩家账号ID
  public string AccountId { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetAccountIdBytes() { return __vector_as_arraysegment(4); }
  ///房间密码
  public int Hp { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<ReviveResp> CreateReviveResp(FlatBufferBuilder builder,
      StringOffset accountIdOffset = default(StringOffset),
      int hp = 0) {
    builder.StartObject(2);
    ReviveResp.AddHp(builder, hp);
    ReviveResp.AddAccountId(builder, accountIdOffset);
    return ReviveResp.EndReviveResp(builder);
  }

  public static void StartReviveResp(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddAccountId(FlatBufferBuilder builder, StringOffset accountIdOffset) { builder.AddOffset(0, accountIdOffset.Value, 0); }
  public static void AddHp(FlatBufferBuilder builder, int hp) { builder.AddInt(1, hp, 0); }
  public static Offset<ReviveResp> EndReviveResp(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ReviveResp>(o);
  }
};


}
