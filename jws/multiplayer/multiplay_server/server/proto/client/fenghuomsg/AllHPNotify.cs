// automatically generated by the FlatBuffers compiler, do not modify

namespace fenghuomsg
{

using System;
using FlatBuffers;

public sealed class AllHPNotify : Table {
  public static AllHPNotify GetRootAsAllHPNotify(ByteBuffer _bb) { return GetRootAsAllHPNotify(_bb, new AllHPNotify()); }
  public static AllHPNotify GetRootAsAllHPNotify(ByteBuffer _bb, AllHPNotify obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public AllHPNotify __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  ///当前战斗小关
  public int Sublevel { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///玩家血量
  public int GetHps(int j) { int o = __offset(6); return o != 0 ? bb.GetInt(__vector(o) + j * 4) : (int)0; }
  public int HpsLength { get { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHpsBytes() { return __vector_as_arraysegment(6); }
  ///敌兵所有血量
  public int GetEnemiesHp(int j) { int o = __offset(8); return o != 0 ? bb.GetInt(__vector(o) + j * 4) : (int)0; }
  public int EnemiesHpLength { get { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEnemiesHpBytes() { return __vector_as_arraysegment(8); }

  public static Offset<AllHPNotify> CreateAllHPNotify(FlatBufferBuilder builder,
      int sublevel = 0,
      VectorOffset HpsOffset = default(VectorOffset),
      VectorOffset enemiesHpOffset = default(VectorOffset)) {
    builder.StartObject(3);
    AllHPNotify.AddEnemiesHp(builder, enemiesHpOffset);
    AllHPNotify.AddHps(builder, HpsOffset);
    AllHPNotify.AddSublevel(builder, sublevel);
    return AllHPNotify.EndAllHPNotify(builder);
  }

  public static void StartAllHPNotify(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddSublevel(FlatBufferBuilder builder, int sublevel) { builder.AddInt(0, sublevel, 0); }
  public static void AddHps(FlatBufferBuilder builder, VectorOffset HpsOffset) { builder.AddOffset(1, HpsOffset.Value, 0); }
  public static VectorOffset CreateHpsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartHpsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnemiesHp(FlatBufferBuilder builder, VectorOffset enemiesHpOffset) { builder.AddOffset(2, enemiesHpOffset.Value, 0); }
  public static VectorOffset CreateEnemiesHpVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartEnemiesHpVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AllHPNotify> EndAllHPNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AllHPNotify>(o);
  }
};


}
