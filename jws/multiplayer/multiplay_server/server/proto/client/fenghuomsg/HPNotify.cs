// automatically generated by the FlatBuffers compiler, do not modify

namespace fenghuomsg
{

using System;
using FlatBuffers;

/// [Notify]客户端通知服务器伤害\损失HP通知
public sealed class HPNotify : Table {
  public static HPNotify GetRootAsHPNotify(ByteBuffer _bb) { return GetRootAsHPNotify(_bb, new HPNotify()); }
  public static HPNotify GetRootAsHPNotify(ByteBuffer _bb, HPNotify obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public HPNotify __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  ///玩家账号ID
  public int Myidx { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///玩家自身血量变化
  public int MyHpD { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///玩家对敌兵造成的血量变化
  public int GetEnemiesHpD(int j) { int o = __offset(8); return o != 0 ? bb.GetInt(__vector(o) + j * 4) : (int)0; }
  public int EnemiesHpDLength { get { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEnemiesHpDBytes() { return __vector_as_arraysegment(8); }

  public static Offset<HPNotify> CreateHPNotify(FlatBufferBuilder builder,
      int myidx = 0,
      int myHpD = 0,
      VectorOffset enemiesHpDOffset = default(VectorOffset)) {
    builder.StartObject(3);
    HPNotify.AddEnemiesHpD(builder, enemiesHpDOffset);
    HPNotify.AddMyHpD(builder, myHpD);
    HPNotify.AddMyidx(builder, myidx);
    return HPNotify.EndHPNotify(builder);
  }

  public static void StartHPNotify(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddMyidx(FlatBufferBuilder builder, int myidx) { builder.AddInt(0, myidx, 0); }
  public static void AddMyHpD(FlatBufferBuilder builder, int myHpD) { builder.AddInt(1, myHpD, 0); }
  public static void AddEnemiesHpD(FlatBufferBuilder builder, VectorOffset enemiesHpDOffset) { builder.AddOffset(2, enemiesHpDOffset.Value, 0); }
  public static VectorOffset CreateEnemiesHpDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartEnemiesHpDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<HPNotify> EndHPNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HPNotify>(o);
  }
};


}
