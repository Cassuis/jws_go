// automatically generated by the FlatBuffers compiler, do not modify

namespace multiplayMsg
{

using System;
using FlatBuffers;

///[Notify]准备开始战斗
public sealed class ReadyMultiplayGameNotify : Table {
  public static ReadyMultiplayGameNotify GetRootAsReadyMultiplayGameNotify(ByteBuffer _bb) { return GetRootAsReadyMultiplayGameNotify(_bb, new ReadyMultiplayGameNotify()); }
  public static ReadyMultiplayGameNotify GetRootAsReadyMultiplayGameNotify(ByteBuffer _bb, ReadyMultiplayGameNotify obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public ReadyMultiplayGameNotify __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  ///玩家账号ID
  public string AccountId { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetAccountIdBytes() { return __vector_as_arraysegment(4); }
  ///请求进入房间ID
  public string RoomID { get { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetRoomIDBytes() { return __vector_as_arraysegment(6); }
  public int Latency { get { int o = __offset(8); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  /// hp
  public long PlayerHP { get { int o = __offset(10); return o != 0 ? bb.GetLong(o + bb_pos) : (long)0; } }
  public multiplayMsg.AvatarHP GetAvatarHP(int j) { return GetAvatarHP(new multiplayMsg.AvatarHP(), j); }
  public multiplayMsg.AvatarHP GetAvatarHP(multiplayMsg.AvatarHP obj, int j) { int o = __offset(12); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int AvatarHPLength { get { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<ReadyMultiplayGameNotify> CreateReadyMultiplayGameNotify(FlatBufferBuilder builder,
      StringOffset accountIdOffset = default(StringOffset),
      StringOffset roomIDOffset = default(StringOffset),
      int latency = 0,
      long playerHP = 0,
      VectorOffset avatarHPOffset = default(VectorOffset)) {
    builder.StartObject(5);
    ReadyMultiplayGameNotify.AddPlayerHP(builder, playerHP);
    ReadyMultiplayGameNotify.AddAvatarHP(builder, avatarHPOffset);
    ReadyMultiplayGameNotify.AddLatency(builder, latency);
    ReadyMultiplayGameNotify.AddRoomID(builder, roomIDOffset);
    ReadyMultiplayGameNotify.AddAccountId(builder, accountIdOffset);
    return ReadyMultiplayGameNotify.EndReadyMultiplayGameNotify(builder);
  }

  public static void StartReadyMultiplayGameNotify(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddAccountId(FlatBufferBuilder builder, StringOffset accountIdOffset) { builder.AddOffset(0, accountIdOffset.Value, 0); }
  public static void AddRoomID(FlatBufferBuilder builder, StringOffset roomIDOffset) { builder.AddOffset(1, roomIDOffset.Value, 0); }
  public static void AddLatency(FlatBufferBuilder builder, int latency) { builder.AddInt(2, latency, 0); }
  public static void AddPlayerHP(FlatBufferBuilder builder, long playerHP) { builder.AddLong(3, playerHP, 0); }
  public static void AddAvatarHP(FlatBufferBuilder builder, VectorOffset avatarHPOffset) { builder.AddOffset(4, avatarHPOffset.Value, 0); }
  public static VectorOffset CreateAvatarHPVector(FlatBufferBuilder builder, Offset<multiplayMsg.AvatarHP>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartAvatarHPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ReadyMultiplayGameNotify> EndReadyMultiplayGameNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ReadyMultiplayGameNotify>(o);
  }
  public static void FinishReadyMultiplayGameNotifyBuffer(FlatBufferBuilder builder, Offset<ReadyMultiplayGameNotify> offset) { builder.Finish(offset.Value); }
};


}
