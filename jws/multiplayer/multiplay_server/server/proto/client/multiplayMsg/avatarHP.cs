// automatically generated by the FlatBuffers compiler, do not modify

namespace multiplayMsg
{

using System;
using FlatBuffers;

public sealed class AvatarHP : Table {
  public static AvatarHP GetRootAsAvatarHP(ByteBuffer _bb) { return GetRootAsAvatarHP(_bb, new AvatarHP()); }
  public static AvatarHP GetRootAsAvatarHP(ByteBuffer _bb, AvatarHP obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public AvatarHP __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int Avatar { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public int Hp { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<AvatarHP> CreateAvatarHP(FlatBufferBuilder builder,
      int avatar = 0,
      int hp = 0) {
    builder.StartObject(2);
    AvatarHP.AddHp(builder, hp);
    AvatarHP.AddAvatar(builder, avatar);
    return AvatarHP.EndAvatarHP(builder);
  }

  public static void StartAvatarHP(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddAvatar(FlatBufferBuilder builder, int avatar) { builder.AddInt(0, avatar, 0); }
  public static void AddHp(FlatBufferBuilder builder, int hp) { builder.AddInt(1, hp, 0); }
  public static Offset<AvatarHP> EndAvatarHP(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AvatarHP>(o);
  }
  public static void FinishAvatarHPBuffer(FlatBufferBuilder builder, Offset<AvatarHP> offset) { builder.Finish(offset.Value); }
};


}
