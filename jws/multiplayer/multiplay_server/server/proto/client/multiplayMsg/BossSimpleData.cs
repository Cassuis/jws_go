// automatically generated by the FlatBuffers compiler, do not modify

namespace multiplayMsg
{

using System;
using FlatBuffers;

/// [Notify]伤害\损失HP通知
public sealed class BossSimpleData : Table {
  public static BossSimpleData GetRootAsBossSimpleData(ByteBuffer _bb) { return GetRootAsBossSimpleData(_bb, new BossSimpleData()); }
  public static BossSimpleData GetRootAsBossSimpleData(ByteBuffer _bb, BossSimpleData obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public BossSimpleData __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  ///玩家账号ID
  public string AccountId { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetAccountIdBytes() { return __vector_as_arraysegment(4); }
  ///请求进入房间ID
  public string RoomID { get { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetRoomIDBytes() { return __vector_as_arraysegment(6); }
  public int BossState { get { int o = __offset(8); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public multiplayMsg.Vector BossPosition { get { return GetBossPosition(new multiplayMsg.Vector()); } }
  public multiplayMsg.Vector GetBossPosition(multiplayMsg.Vector obj) { int o = __offset(10); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public multiplayMsg.Vector BossDirection { get { return GetBossDirection(new multiplayMsg.Vector()); } }
  public multiplayMsg.Vector GetBossDirection(multiplayMsg.Vector obj) { int o = __offset(12); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public float BossCurSpeed { get { int o = __offset(14); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }
  public long BossNotifyTimeStamp { get { int o = __offset(16); return o != 0 ? bb.GetLong(o + bb_pos) : (long)0; } }
  public int Anim { get { int o = __offset(18); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<BossSimpleData> CreateBossSimpleData(FlatBufferBuilder builder,
      StringOffset accountIdOffset = default(StringOffset),
      StringOffset roomIDOffset = default(StringOffset),
      int bossState = 0,
      Offset<multiplayMsg.Vector> bossPositionOffset = default(Offset<multiplayMsg.Vector>),
      Offset<multiplayMsg.Vector> bossDirectionOffset = default(Offset<multiplayMsg.Vector>),
      float bossCurSpeed = 0.0f,
      long bossNotifyTimeStamp = 0,
      int anim = 0) {
    builder.StartObject(8);
    BossSimpleData.AddBossNotifyTimeStamp(builder, bossNotifyTimeStamp);
    BossSimpleData.AddAnim(builder, anim);
    BossSimpleData.AddBossCurSpeed(builder, bossCurSpeed);
    BossSimpleData.AddBossDirection(builder, bossDirectionOffset);
    BossSimpleData.AddBossPosition(builder, bossPositionOffset);
    BossSimpleData.AddBossState(builder, bossState);
    BossSimpleData.AddRoomID(builder, roomIDOffset);
    BossSimpleData.AddAccountId(builder, accountIdOffset);
    return BossSimpleData.EndBossSimpleData(builder);
  }

  public static void StartBossSimpleData(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddAccountId(FlatBufferBuilder builder, StringOffset accountIdOffset) { builder.AddOffset(0, accountIdOffset.Value, 0); }
  public static void AddRoomID(FlatBufferBuilder builder, StringOffset roomIDOffset) { builder.AddOffset(1, roomIDOffset.Value, 0); }
  public static void AddBossState(FlatBufferBuilder builder, int bossState) { builder.AddInt(2, bossState, 0); }
  public static void AddBossPosition(FlatBufferBuilder builder, Offset<multiplayMsg.Vector> bossPositionOffset) { builder.AddOffset(3, bossPositionOffset.Value, 0); }
  public static void AddBossDirection(FlatBufferBuilder builder, Offset<multiplayMsg.Vector> bossDirectionOffset) { builder.AddOffset(4, bossDirectionOffset.Value, 0); }
  public static void AddBossCurSpeed(FlatBufferBuilder builder, float bossCurSpeed) { builder.AddFloat(5, bossCurSpeed, 0.0f); }
  public static void AddBossNotifyTimeStamp(FlatBufferBuilder builder, long bossNotifyTimeStamp) { builder.AddLong(6, bossNotifyTimeStamp, 0); }
  public static void AddAnim(FlatBufferBuilder builder, int anim) { builder.AddInt(7, anim, 0); }
  public static Offset<BossSimpleData> EndBossSimpleData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BossSimpleData>(o);
  }
  public static void FinishBossSimpleDataBuffer(FlatBufferBuilder builder, Offset<BossSimpleData> offset) { builder.Finish(offset.Value); }
};


}
