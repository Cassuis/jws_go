// automatically generated by the FlatBuffers compiler, do not modify

namespace multiplayMsg
{

using System;
using FlatBuffers;

public sealed class TestMult : Table {
  public static TestMult GetRootAsTestMult(ByteBuffer _bb) { return GetRootAsTestMult(_bb, new TestMult()); }
  public static TestMult GetRootAsTestMult(ByteBuffer _bb, TestMult obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public TestMult __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public multiplayMsg.PlayerState GetPlayerStat(int j) { return GetPlayerStat(new multiplayMsg.PlayerState(), j); }
  public multiplayMsg.PlayerState GetPlayerStat(multiplayMsg.PlayerState obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int PlayerStatLength { get { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<TestMult> CreateTestMult(FlatBufferBuilder builder,
      VectorOffset playerStatOffset = default(VectorOffset)) {
    builder.StartObject(1);
    TestMult.AddPlayerStat(builder, playerStatOffset);
    return TestMult.EndTestMult(builder);
  }

  public static void StartTestMult(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPlayerStat(FlatBufferBuilder builder, VectorOffset playerStatOffset) { builder.AddOffset(0, playerStatOffset.Value, 0); }
  public static VectorOffset CreatePlayerStatVector(FlatBufferBuilder builder, Offset<multiplayMsg.PlayerState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPlayerStatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<TestMult> EndTestMult(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TestMult>(o);
  }
  public static void FinishTestMultBuffer(FlatBufferBuilder builder, Offset<TestMult> offset) { builder.Finish(offset.Value); }
};


}
