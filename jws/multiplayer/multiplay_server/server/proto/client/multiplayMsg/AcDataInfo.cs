// automatically generated by the FlatBuffers compiler, do not modify

namespace multiplayMsg
{

using System;
using FlatBuffers;

///Boss数据(结构上和AcDataList表一致)
public sealed class AcDataInfo : Table {
  public static AcDataInfo GetRootAsAcDataInfo(ByteBuffer _bb) { return GetRootAsAcDataInfo(_bb, new AcDataInfo()); }
  public static AcDataInfo GetRootAsAcDataInfo(ByteBuffer _bb, AcDataInfo obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public AcDataInfo __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int Idx { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public string Id { get { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetIdBytes() { return __vector_as_arraysegment(6); }
  public string CharacterID { get { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetCharacterIDBytes() { return __vector_as_arraysegment(8); }
  public string Typ { get { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetTypBytes() { return __vector_as_arraysegment(10); }
  public string Idid { get { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetIdidBytes() { return __vector_as_arraysegment(12); }
  public string NameIDs { get { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetNameIDsBytes() { return __vector_as_arraysegment(14); }
  public string StageIDs { get { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetStageIDsBytes() { return __vector_as_arraysegment(16); }
  public string Faction { get { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetFactionBytes() { return __vector_as_arraysegment(18); }
  public uint IsPlayer { get { int o = __offset(20); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint Speed { get { int o = __offset(22); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint AngleSpeed { get { int o = __offset(24); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint HitPoint { get { int o = __offset(26); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint HpSectionNum { get { int o = __offset(28); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint ThresholdMin { get { int o = __offset(30); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint ThresholdMax { get { int o = __offset(32); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint ThresholdRatio { get { int o = __offset(34); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint Guard { get { int o = __offset(36); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public float ShieldAbsorbRate { get { int o = __offset(38); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }
  public uint PhysicalDamage { get { int o = __offset(40); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint PhysicalResist { get { int o = __offset(42); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public float CritRate { get { int o = __offset(44); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }
  public float CritDamage { get { int o = __offset(46); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }
  public string Equip1 { get { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetEquip1Bytes() { return __vector_as_arraysegment(48); }
  public string Equip2 { get { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetEquip2Bytes() { return __vector_as_arraysegment(50); }
  public string Aura { get { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetAuraBytes() { return __vector_as_arraysegment(52); }
  public uint CantbeBlackHole { get { int o = __offset(54); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint CantbeSpecialHit { get { int o = __offset(56); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }

  public static Offset<AcDataInfo> CreateAcDataInfo(FlatBufferBuilder builder,
      int idx = 0,
      StringOffset idOffset = default(StringOffset),
      StringOffset characterIDOffset = default(StringOffset),
      StringOffset typOffset = default(StringOffset),
      StringOffset ididOffset = default(StringOffset),
      StringOffset nameIDsOffset = default(StringOffset),
      StringOffset stageIDsOffset = default(StringOffset),
      StringOffset factionOffset = default(StringOffset),
      uint isPlayer = 0,
      uint speed = 0,
      uint angleSpeed = 0,
      uint hitPoint = 0,
      uint hpSectionNum = 0,
      uint thresholdMin = 0,
      uint thresholdMax = 0,
      uint thresholdRatio = 0,
      uint guard = 0,
      float shieldAbsorbRate = 0.0f,
      uint physicalDamage = 0,
      uint physicalResist = 0,
      float critRate = 0.0f,
      float critDamage = 0.0f,
      StringOffset equip1Offset = default(StringOffset),
      StringOffset equip2Offset = default(StringOffset),
      StringOffset auraOffset = default(StringOffset),
      uint cantbeBlackHole = 0,
      uint cantbeSpecialHit = 0) {
    builder.StartObject(27);
    AcDataInfo.AddCantbeSpecialHit(builder, cantbeSpecialHit);
    AcDataInfo.AddCantbeBlackHole(builder, cantbeBlackHole);
    AcDataInfo.AddAura(builder, auraOffset);
    AcDataInfo.AddEquip2(builder, equip2Offset);
    AcDataInfo.AddEquip1(builder, equip1Offset);
    AcDataInfo.AddCritDamage(builder, critDamage);
    AcDataInfo.AddCritRate(builder, critRate);
    AcDataInfo.AddPhysicalResist(builder, physicalResist);
    AcDataInfo.AddPhysicalDamage(builder, physicalDamage);
    AcDataInfo.AddShieldAbsorbRate(builder, shieldAbsorbRate);
    AcDataInfo.AddGuard(builder, guard);
    AcDataInfo.AddThresholdRatio(builder, thresholdRatio);
    AcDataInfo.AddThresholdMax(builder, thresholdMax);
    AcDataInfo.AddThresholdMin(builder, thresholdMin);
    AcDataInfo.AddHpSectionNum(builder, hpSectionNum);
    AcDataInfo.AddHitPoint(builder, hitPoint);
    AcDataInfo.AddAngleSpeed(builder, angleSpeed);
    AcDataInfo.AddSpeed(builder, speed);
    AcDataInfo.AddIsPlayer(builder, isPlayer);
    AcDataInfo.AddFaction(builder, factionOffset);
    AcDataInfo.AddStageIDs(builder, stageIDsOffset);
    AcDataInfo.AddNameIDs(builder, nameIDsOffset);
    AcDataInfo.AddIdid(builder, ididOffset);
    AcDataInfo.AddTyp(builder, typOffset);
    AcDataInfo.AddCharacterID(builder, characterIDOffset);
    AcDataInfo.AddId(builder, idOffset);
    AcDataInfo.AddIdx(builder, idx);
    return AcDataInfo.EndAcDataInfo(builder);
  }

  public static void StartAcDataInfo(FlatBufferBuilder builder) { builder.StartObject(27); }
  public static void AddIdx(FlatBufferBuilder builder, int idx) { builder.AddInt(0, idx, 0); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(1, idOffset.Value, 0); }
  public static void AddCharacterID(FlatBufferBuilder builder, StringOffset characterIDOffset) { builder.AddOffset(2, characterIDOffset.Value, 0); }
  public static void AddTyp(FlatBufferBuilder builder, StringOffset typOffset) { builder.AddOffset(3, typOffset.Value, 0); }
  public static void AddIdid(FlatBufferBuilder builder, StringOffset ididOffset) { builder.AddOffset(4, ididOffset.Value, 0); }
  public static void AddNameIDs(FlatBufferBuilder builder, StringOffset nameIDsOffset) { builder.AddOffset(5, nameIDsOffset.Value, 0); }
  public static void AddStageIDs(FlatBufferBuilder builder, StringOffset stageIDsOffset) { builder.AddOffset(6, stageIDsOffset.Value, 0); }
  public static void AddFaction(FlatBufferBuilder builder, StringOffset factionOffset) { builder.AddOffset(7, factionOffset.Value, 0); }
  public static void AddIsPlayer(FlatBufferBuilder builder, uint isPlayer) { builder.AddUint(8, isPlayer, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, uint speed) { builder.AddUint(9, speed, 0); }
  public static void AddAngleSpeed(FlatBufferBuilder builder, uint angleSpeed) { builder.AddUint(10, angleSpeed, 0); }
  public static void AddHitPoint(FlatBufferBuilder builder, uint hitPoint) { builder.AddUint(11, hitPoint, 0); }
  public static void AddHpSectionNum(FlatBufferBuilder builder, uint hpSectionNum) { builder.AddUint(12, hpSectionNum, 0); }
  public static void AddThresholdMin(FlatBufferBuilder builder, uint thresholdMin) { builder.AddUint(13, thresholdMin, 0); }
  public static void AddThresholdMax(FlatBufferBuilder builder, uint thresholdMax) { builder.AddUint(14, thresholdMax, 0); }
  public static void AddThresholdRatio(FlatBufferBuilder builder, uint thresholdRatio) { builder.AddUint(15, thresholdRatio, 0); }
  public static void AddGuard(FlatBufferBuilder builder, uint guard) { builder.AddUint(16, guard, 0); }
  public static void AddShieldAbsorbRate(FlatBufferBuilder builder, float shieldAbsorbRate) { builder.AddFloat(17, shieldAbsorbRate, 0.0f); }
  public static void AddPhysicalDamage(FlatBufferBuilder builder, uint physicalDamage) { builder.AddUint(18, physicalDamage, 0); }
  public static void AddPhysicalResist(FlatBufferBuilder builder, uint physicalResist) { builder.AddUint(19, physicalResist, 0); }
  public static void AddCritRate(FlatBufferBuilder builder, float critRate) { builder.AddFloat(20, critRate, 0.0f); }
  public static void AddCritDamage(FlatBufferBuilder builder, float critDamage) { builder.AddFloat(21, critDamage, 0.0f); }
  public static void AddEquip1(FlatBufferBuilder builder, StringOffset equip1Offset) { builder.AddOffset(22, equip1Offset.Value, 0); }
  public static void AddEquip2(FlatBufferBuilder builder, StringOffset equip2Offset) { builder.AddOffset(23, equip2Offset.Value, 0); }
  public static void AddAura(FlatBufferBuilder builder, StringOffset auraOffset) { builder.AddOffset(24, auraOffset.Value, 0); }
  public static void AddCantbeBlackHole(FlatBufferBuilder builder, uint cantbeBlackHole) { builder.AddUint(25, cantbeBlackHole, 0); }
  public static void AddCantbeSpecialHit(FlatBufferBuilder builder, uint cantbeSpecialHit) { builder.AddUint(26, cantbeSpecialHit, 0); }
  public static Offset<AcDataInfo> EndAcDataInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AcDataInfo>(o);
  }
  public static void FinishAcDataInfoBuffer(FlatBufferBuilder builder, Offset<AcDataInfo> offset) { builder.Finish(offset.Value); }
};


}
