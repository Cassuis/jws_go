// automatically generated by the FlatBuffers compiler, do not modify

namespace multiplayMsg
{

using System;
using FlatBuffers;

/// [Notify]伤害\损失HP通知
public sealed class HPNotify : Table {
  public static HPNotify GetRootAsHPNotify(ByteBuffer _bb) { return GetRootAsHPNotify(_bb, new HPNotify()); }
  public static HPNotify GetRootAsHPNotify(ByteBuffer _bb, HPNotify obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public HPNotify __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  ///玩家账号ID
  public string AccountId { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetAccountIdBytes() { return __vector_as_arraysegment(4); }
  ///请求进入房间ID
  public string RoomID { get { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetRoomIDBytes() { return __vector_as_arraysegment(6); }
  ///玩家自身血量变化
  public int PlayerHpD { get { int o = __offset(8); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///玩家对Boss造成的血量变化
  public int GetBossHpD(int j) { int o = __offset(10); return o != 0 ? bb.GetInt(__vector(o) + j * 4) : (int)0; }
  public int BossHpDLength { get { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBossHpDBytes() { return __vector_as_arraysegment(10); }
  ///boss护甲
  public long GetBossArmor(int j) { int o = __offset(12); return o != 0 ? bb.GetLong(__vector(o) + j * 8) : (long)0; }
  public int BossArmorLength { get { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBossArmorBytes() { return __vector_as_arraysegment(12); }
  /// 本次伤害类型
  public int DamageTyp { get { int o = __offset(14); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  /// 队友血量变化
  public multiplayMsg.PlayerState GetOthersHpD(int j) { return GetOthersHpD(new multiplayMsg.PlayerState(), j); }
  public multiplayMsg.PlayerState GetOthersHpD(multiplayMsg.PlayerState obj, int j) { int o = __offset(16); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int OthersHpDLength { get { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; } }
  /// self avatar id
  public int AvatarID { get { int o = __offset(18); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<HPNotify> CreateHPNotify(FlatBufferBuilder builder,
      StringOffset accountIdOffset = default(StringOffset),
      StringOffset roomIDOffset = default(StringOffset),
      int playerHpD = 0,
      VectorOffset bossHpDOffset = default(VectorOffset),
      VectorOffset bossArmorOffset = default(VectorOffset),
      int damageTyp = 0,
      VectorOffset othersHpDOffset = default(VectorOffset),
      int avatarID = 0) {
    builder.StartObject(8);
    HPNotify.AddAvatarID(builder, avatarID);
    HPNotify.AddOthersHpD(builder, othersHpDOffset);
    HPNotify.AddDamageTyp(builder, damageTyp);
    HPNotify.AddBossArmor(builder, bossArmorOffset);
    HPNotify.AddBossHpD(builder, bossHpDOffset);
    HPNotify.AddPlayerHpD(builder, playerHpD);
    HPNotify.AddRoomID(builder, roomIDOffset);
    HPNotify.AddAccountId(builder, accountIdOffset);
    return HPNotify.EndHPNotify(builder);
  }

  public static void StartHPNotify(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddAccountId(FlatBufferBuilder builder, StringOffset accountIdOffset) { builder.AddOffset(0, accountIdOffset.Value, 0); }
  public static void AddRoomID(FlatBufferBuilder builder, StringOffset roomIDOffset) { builder.AddOffset(1, roomIDOffset.Value, 0); }
  public static void AddPlayerHpD(FlatBufferBuilder builder, int playerHpD) { builder.AddInt(2, playerHpD, 0); }
  public static void AddBossHpD(FlatBufferBuilder builder, VectorOffset bossHpDOffset) { builder.AddOffset(3, bossHpDOffset.Value, 0); }
  public static VectorOffset CreateBossHpDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBossHpDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBossArmor(FlatBufferBuilder builder, VectorOffset bossArmorOffset) { builder.AddOffset(4, bossArmorOffset.Value, 0); }
  public static VectorOffset CreateBossArmorVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartBossArmorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddDamageTyp(FlatBufferBuilder builder, int damageTyp) { builder.AddInt(5, damageTyp, 0); }
  public static void AddOthersHpD(FlatBufferBuilder builder, VectorOffset othersHpDOffset) { builder.AddOffset(6, othersHpDOffset.Value, 0); }
  public static VectorOffset CreateOthersHpDVector(FlatBufferBuilder builder, Offset<multiplayMsg.PlayerState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartOthersHpDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAvatarID(FlatBufferBuilder builder, int avatarID) { builder.AddInt(7, avatarID, 0); }
  public static Offset<HPNotify> EndHPNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HPNotify>(o);
  }
  public static void FinishHPNotifyBuffer(FlatBufferBuilder builder, Offset<HPNotify> offset) { builder.Finish(offset.Value); }
};


}
