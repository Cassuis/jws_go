// automatically generated by the FlatBuffers compiler, do not modify

namespace teamboss_msg
{

using System;
using FlatBuffers;

///[RPC]获取奖励 resp
public sealed class GetGameRewardsRsp : Table {
  public static GetGameRewardsRsp GetRootAsGetGameRewardsRsp(ByteBuffer _bb) { return GetRootAsGetGameRewardsRsp(_bb, new GetGameRewardsRsp()); }
  public static GetGameRewardsRsp GetRootAsGetGameRewardsRsp(ByteBuffer _bb, GetGameRewardsRsp obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public GetGameRewardsRsp __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  ///是否双倍(0-否 1-是)
  public int IsDouble { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///是否使用HC双倍(0-否 1-是)
  public int IsUseHc { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///奖励ID列表
  public string GetRewards(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int RewardsLength { get { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; } }
  ///奖励数量列表(已做双倍四倍处理)
  public uint GetCounts(int j) { int o = __offset(10); return o != 0 ? bb.GetUint(__vector(o) + j * 4) : (uint)0; }
  public int CountsLength { get { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetCountsBytes() { return __vector_as_arraysegment(10); }

  public static Offset<GetGameRewardsRsp> CreateGetGameRewardsRsp(FlatBufferBuilder builder,
      int IsDouble = 0,
      int IsUseHc = 0,
      VectorOffset RewardsOffset = default(VectorOffset),
      VectorOffset CountsOffset = default(VectorOffset)) {
    builder.StartObject(4);
    GetGameRewardsRsp.AddCounts(builder, CountsOffset);
    GetGameRewardsRsp.AddRewards(builder, RewardsOffset);
    GetGameRewardsRsp.AddIsUseHc(builder, IsUseHc);
    GetGameRewardsRsp.AddIsDouble(builder, IsDouble);
    return GetGameRewardsRsp.EndGetGameRewardsRsp(builder);
  }

  public static void StartGetGameRewardsRsp(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddIsDouble(FlatBufferBuilder builder, int IsDouble) { builder.AddInt(0, IsDouble, 0); }
  public static void AddIsUseHc(FlatBufferBuilder builder, int IsUseHc) { builder.AddInt(1, IsUseHc, 0); }
  public static void AddRewards(FlatBufferBuilder builder, VectorOffset RewardsOffset) { builder.AddOffset(2, RewardsOffset.Value, 0); }
  public static VectorOffset CreateRewardsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCounts(FlatBufferBuilder builder, VectorOffset CountsOffset) { builder.AddOffset(3, CountsOffset.Value, 0); }
  public static VectorOffset CreateCountsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartCountsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GetGameRewardsRsp> EndGetGameRewardsRsp(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GetGameRewardsRsp>(o);
  }
  public static void FinishGetGameRewardsRspBuffer(FlatBufferBuilder builder, Offset<GetGameRewardsRsp> offset) { builder.Finish(offset.Value); }
};


}
