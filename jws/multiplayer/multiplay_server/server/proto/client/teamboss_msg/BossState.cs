// automatically generated by the FlatBuffers compiler, do not modify

namespace teamboss_msg
{

using System;
using FlatBuffers;

///Boss状态(数组中以Boss数据中的idx为索引)
public sealed class BossState : Table {
  public static BossState GetRootAsBossState(ByteBuffer _bb) { return GetRootAsBossState(_bb, new BossState()); }
  public static BossState GetRootAsBossState(ByteBuffer _bb, BossState obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public BossState __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  ///boss hp
  public int Hp { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///boss 仇恨值(数组中以玩家数据中的idx为索引)
  public int GetHatred(int j) { int o = __offset(6); return o != 0 ? bb.GetInt(__vector(o) + j * 4) : (int)0; }
  public int HatredLength { get { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHatredBytes() { return __vector_as_arraysegment(6); }

  public static Offset<BossState> CreateBossState(FlatBufferBuilder builder,
      int hp = 0,
      VectorOffset hatredOffset = default(VectorOffset)) {
    builder.StartObject(2);
    BossState.AddHatred(builder, hatredOffset);
    BossState.AddHp(builder, hp);
    return BossState.EndBossState(builder);
  }

  public static void StartBossState(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddHp(FlatBufferBuilder builder, int hp) { builder.AddInt(0, hp, 0); }
  public static void AddHatred(FlatBufferBuilder builder, VectorOffset hatredOffset) { builder.AddOffset(1, hatredOffset.Value, 0); }
  public static VectorOffset CreateHatredVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartHatredVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BossState> EndBossState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BossState>(o);
  }
  public static void FinishBossStateBuffer(FlatBufferBuilder builder, Offset<BossState> offset) { builder.Finish(offset.Value); }
};


}
