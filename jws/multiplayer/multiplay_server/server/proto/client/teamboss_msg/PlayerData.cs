// automatically generated by the FlatBuffers compiler, do not modify

namespace teamboss_msg
{

using System;
using FlatBuffers;

/// [Notify]伤害\损失HP通知
public sealed class PlayerData : Table {
  public static PlayerData GetRootAsPlayerData(ByteBuffer _bb) { return GetRootAsPlayerData(_bb, new PlayerData()); }
  public static PlayerData GetRootAsPlayerData(ByteBuffer _bb, PlayerData obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public PlayerData __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public teamboss_msg.PlayerSimpleData SimpleData { get { return GetSimpleData(new teamboss_msg.PlayerSimpleData()); } }
  public teamboss_msg.PlayerSimpleData GetSimpleData(teamboss_msg.PlayerSimpleData obj) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public int ReleaseSkillID { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public int ComboCount { get { int o = __offset(8); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public teamboss_msg.Vector StartAttackPos { get { return GetStartAttackPos(new teamboss_msg.Vector()); } }
  public teamboss_msg.Vector GetStartAttackPos(teamboss_msg.Vector obj) { int o = __offset(10); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public teamboss_msg.Vector StartAttackDir { get { return GetStartAttackDir(new teamboss_msg.Vector()); } }
  public teamboss_msg.Vector GetStartAttackDir(teamboss_msg.Vector obj) { int o = __offset(12); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public long StartAttackTimeStamp { get { int o = __offset(14); return o != 0 ? bb.GetLong(o + bb_pos) : (long)0; } }

  public static Offset<PlayerData> CreatePlayerData(FlatBufferBuilder builder,
      Offset<teamboss_msg.PlayerSimpleData> simpleDataOffset = default(Offset<teamboss_msg.PlayerSimpleData>),
      int releaseSkillID = 0,
      int comboCount = 0,
      Offset<teamboss_msg.Vector> startAttackPosOffset = default(Offset<teamboss_msg.Vector>),
      Offset<teamboss_msg.Vector> startAttackDirOffset = default(Offset<teamboss_msg.Vector>),
      long startAttackTimeStamp = 0) {
    builder.StartObject(6);
    PlayerData.AddStartAttackTimeStamp(builder, startAttackTimeStamp);
    PlayerData.AddStartAttackDir(builder, startAttackDirOffset);
    PlayerData.AddStartAttackPos(builder, startAttackPosOffset);
    PlayerData.AddComboCount(builder, comboCount);
    PlayerData.AddReleaseSkillID(builder, releaseSkillID);
    PlayerData.AddSimpleData(builder, simpleDataOffset);
    return PlayerData.EndPlayerData(builder);
  }

  public static void StartPlayerData(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddSimpleData(FlatBufferBuilder builder, Offset<teamboss_msg.PlayerSimpleData> simpleDataOffset) { builder.AddOffset(0, simpleDataOffset.Value, 0); }
  public static void AddReleaseSkillID(FlatBufferBuilder builder, int releaseSkillID) { builder.AddInt(1, releaseSkillID, 0); }
  public static void AddComboCount(FlatBufferBuilder builder, int comboCount) { builder.AddInt(2, comboCount, 0); }
  public static void AddStartAttackPos(FlatBufferBuilder builder, Offset<teamboss_msg.Vector> startAttackPosOffset) { builder.AddOffset(3, startAttackPosOffset.Value, 0); }
  public static void AddStartAttackDir(FlatBufferBuilder builder, Offset<teamboss_msg.Vector> startAttackDirOffset) { builder.AddOffset(4, startAttackDirOffset.Value, 0); }
  public static void AddStartAttackTimeStamp(FlatBufferBuilder builder, long startAttackTimeStamp) { builder.AddLong(5, startAttackTimeStamp, 0); }
  public static Offset<PlayerData> EndPlayerData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PlayerData>(o);
  }
  public static void FinishPlayerDataBuffer(FlatBufferBuilder builder, Offset<PlayerData> offset) { builder.Finish(offset.Value); }
};


}
