// automatically generated by the FlatBuffers compiler, do not modify

namespace teamboss_msg
{

using System;
using FlatBuffers;

///玩家状态(数组中以玩家数据中的idx为索引)
public sealed class PlayerState : Table {
  public static PlayerState GetRootAsPlayerState(ByteBuffer _bb) { return GetRootAsPlayerState(_bb, new PlayerState()); }
  public static PlayerState GetRootAsPlayerState(ByteBuffer _bb, PlayerState obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public PlayerState __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string AccountID { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetAccountIDBytes() { return __vector_as_arraysegment(4); }
  ///玩家状态 1-掉线 2-已退出 3-未准备 4-已准备 5-已死亡 6-战斗中
  public int State { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  ///玩家hp
  public int Hp { get { int o = __offset(8); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public int Pos { get { int o = __offset(10); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<PlayerState> CreatePlayerState(FlatBufferBuilder builder,
      StringOffset AccountIDOffset = default(StringOffset),
      int state = 0,
      int hp = 0,
      int Pos = 0) {
    builder.StartObject(4);
    PlayerState.AddPos(builder, Pos);
    PlayerState.AddHp(builder, hp);
    PlayerState.AddState(builder, state);
    PlayerState.AddAccountID(builder, AccountIDOffset);
    return PlayerState.EndPlayerState(builder);
  }

  public static void StartPlayerState(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddAccountID(FlatBufferBuilder builder, StringOffset AccountIDOffset) { builder.AddOffset(0, AccountIDOffset.Value, 0); }
  public static void AddState(FlatBufferBuilder builder, int state) { builder.AddInt(1, state, 0); }
  public static void AddHp(FlatBufferBuilder builder, int hp) { builder.AddInt(2, hp, 0); }
  public static void AddPos(FlatBufferBuilder builder, int Pos) { builder.AddInt(3, Pos, 0); }
  public static Offset<PlayerState> EndPlayerState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PlayerState>(o);
  }
  public static void FinishPlayerStateBuffer(FlatBufferBuilder builder, Offset<PlayerState> offset) { builder.Finish(offset.Value); }
};


}
