// automatically generated by the FlatBuffers compiler, do not modify

namespace gve_msg
{

using System;
using FlatBuffers;

public sealed class Ping : Table {
  public static Ping GetRootAsPing(ByteBuffer _bb) { return GetRootAsPing(_bb, new Ping()); }
  public static Ping GetRootAsPing(ByteBuffer _bb, Ping obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public Ping __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int Stat { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public long StartTime { get { int o = __offset(6); return o != 0 ? bb.GetLong(o + bb_pos) : (long)0; } }
  public long EndTime { get { int o = __offset(8); return o != 0 ? bb.GetLong(o + bb_pos) : (long)0; } }
  public int GameClass { get { int o = __offset(10); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public string GameScene { get { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetGameSceneBytes() { return __vector_as_arraysegment(12); }

  public static Offset<Ping> CreatePing(FlatBufferBuilder builder,
      int stat = 0,
      long startTime = 0,
      long endTime = 0,
      int GameClass = 0,
      StringOffset GameSceneOffset = default(StringOffset)) {
    builder.StartObject(5);
    Ping.AddEndTime(builder, endTime);
    Ping.AddStartTime(builder, startTime);
    Ping.AddGameScene(builder, GameSceneOffset);
    Ping.AddGameClass(builder, GameClass);
    Ping.AddStat(builder, stat);
    return Ping.EndPing(builder);
  }

  public static void StartPing(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddStat(FlatBufferBuilder builder, int stat) { builder.AddInt(0, stat, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, long startTime) { builder.AddLong(1, startTime, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, long endTime) { builder.AddLong(2, endTime, 0); }
  public static void AddGameClass(FlatBufferBuilder builder, int GameClass) { builder.AddInt(3, GameClass, 0); }
  public static void AddGameScene(FlatBufferBuilder builder, StringOffset GameSceneOffset) { builder.AddOffset(4, GameSceneOffset.Value, 0); }
  public static Offset<Ping> EndPing(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Ping>(o);
  }
  public static void FinishPingBuffer(FlatBufferBuilder builder, Offset<Ping> offset) { builder.Finish(offset.Value); }
};


}
