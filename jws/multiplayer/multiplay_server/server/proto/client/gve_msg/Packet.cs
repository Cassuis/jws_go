// automatically generated by the FlatBuffers compiler, do not modify

namespace gve_msg
{

using System;
using FlatBuffers;

public sealed class Packet : Table {
  public static Packet GetRootAsPacket(ByteBuffer _bb) { return GetRootAsPacket(_bb, new Packet()); }
  public static Packet GetRootAsPacket(ByteBuffer _bb, Packet obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public Packet __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int Typ { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public long Number { get { int o = __offset(6); return o != 0 ? bb.GetLong(o + bb_pos) : (long)0; } }
  public int Code { get { int o = __offset(8); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public Datas DataType { get { int o = __offset(10); return o != 0 ? (Datas)bb.Get(o + bb_pos) : Datas.NONE; } }
  public TTable GetData<TTable>(TTable obj) where TTable : Table { int o = __offset(12); return o != 0 ? __union(obj, o) : null; }

  public static Offset<Packet> CreatePacket(FlatBufferBuilder builder,
      int typ = 0,
      long number = 0,
      int code = 0,
      Datas data_type = Datas.NONE,
      int dataOffset = 0) {
    builder.StartObject(5);
    Packet.AddNumber(builder, number);
    Packet.AddData(builder, dataOffset);
    Packet.AddCode(builder, code);
    Packet.AddTyp(builder, typ);
    Packet.AddDataType(builder, data_type);
    return Packet.EndPacket(builder);
  }

  public static void StartPacket(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddTyp(FlatBufferBuilder builder, int typ) { builder.AddInt(0, typ, 0); }
  public static void AddNumber(FlatBufferBuilder builder, long number) { builder.AddLong(1, number, 0); }
  public static void AddCode(FlatBufferBuilder builder, int code) { builder.AddInt(2, code, 0); }
  public static void AddDataType(FlatBufferBuilder builder, Datas dataType) { builder.AddByte(3, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(4, dataOffset, 0); }
  public static Offset<Packet> EndPacket(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Packet>(o);
  }
  public static void FinishPacketBuffer(FlatBufferBuilder builder, Offset<Packet> offset) { builder.Finish(offset.Value); }
};


}
