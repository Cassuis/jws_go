// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetGameDatasReq struct {
	_tab flatbuffers.Table
}

func GetRootAsGetGameDatasReq(buf []byte, offset flatbuffers.UOffsetT) *GetGameDatasReq {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetGameDatasReq{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GetGameDatasReq) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetGameDatasReq) AccountId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetGameDatasReq) RoomID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetGameDatasReq) Secret() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GetGameDatasReqStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GetGameDatasReqAddAccountId(builder *flatbuffers.Builder, accountId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(accountId), 0)
}
func GetGameDatasReqAddRoomID(builder *flatbuffers.Builder, roomID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(roomID), 0)
}
func GetGameDatasReqAddSecret(builder *flatbuffers.Builder, secret flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(secret), 0)
}
func GetGameDatasReqEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
