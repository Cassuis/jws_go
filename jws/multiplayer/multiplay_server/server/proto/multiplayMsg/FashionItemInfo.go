// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///玩家时装数据
type FashionItemInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsFashionItemInfo(buf []byte, offset flatbuffers.UOffsetT) *FashionItemInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FashionItemInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FashionItemInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///当前战斗状态(等待开始\已开始\已结束)
func (rcv *FashionItemInfo) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///当前战斗状态(等待开始\已开始\已结束)
func (rcv *FashionItemInfo) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

///当前状态开始时间
func (rcv *FashionItemInfo) Tableid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///当前状态开始时间
///当前状态结束时间
func (rcv *FashionItemInfo) Ot() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///当前状态结束时间
func (rcv *FashionItemInfo) MutateOt(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func FashionItemInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FashionItemInfoAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func FashionItemInfoAddTableid(builder *flatbuffers.Builder, tableid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tableid), 0)
}
func FashionItemInfoAddOt(builder *flatbuffers.Builder, ot int64) {
	builder.PrependInt64Slot(2, ot, 0)
}
func FashionItemInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
