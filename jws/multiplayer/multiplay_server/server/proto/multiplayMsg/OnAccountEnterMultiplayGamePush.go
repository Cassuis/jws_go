// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// [Push]进入玩家信息通知 <不需要了>
/// multi -> client 战斗信息
type OnAccountEnterMultiplayGamePush struct {
	_tab flatbuffers.Table
}

func GetRootAsOnAccountEnterMultiplayGamePush(buf []byte, offset flatbuffers.UOffsetT) *OnAccountEnterMultiplayGamePush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OnAccountEnterMultiplayGamePush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *OnAccountEnterMultiplayGamePush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///当前房间中玩家的状态
func (rcv *OnAccountEnterMultiplayGamePush) PlayerStat(obj *PlayerState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(PlayerState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *OnAccountEnterMultiplayGamePush) PlayerStatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///当前房间中玩家的状态
///当前房间中玩家的数据
func (rcv *OnAccountEnterMultiplayGamePush) AccDatas(obj *AccountInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(AccountInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *OnAccountEnterMultiplayGamePush) AccDatasLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///当前房间中玩家的数据
func OnAccountEnterMultiplayGamePushStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func OnAccountEnterMultiplayGamePushAddPlayerStat(builder *flatbuffers.Builder, playerStat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(playerStat), 0)
}
func OnAccountEnterMultiplayGamePushStartPlayerStatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnAccountEnterMultiplayGamePushAddAccDatas(builder *flatbuffers.Builder, accDatas flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(accDatas), 0)
}
func OnAccountEnterMultiplayGamePushStartAccDatasVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnAccountEnterMultiplayGamePushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
