// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// [Notify]伤害\损失HP通知
type PlayerData struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerData(buf []byte, offset flatbuffers.UOffsetT) *PlayerData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PlayerData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerData) SimpleData(obj *PlayerSimpleData) *PlayerSimpleData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(PlayerSimpleData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PlayerData) ReleaseSkillID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerData) MutateReleaseSkillID(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *PlayerData) ComboCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerData) MutateComboCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *PlayerData) StartAttackPos(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PlayerData) StartAttackDir(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PlayerData) StartAttackTimeStamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerData) MutateStartAttackTimeStamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func PlayerDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func PlayerDataAddSimpleData(builder *flatbuffers.Builder, simpleData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(simpleData), 0)
}
func PlayerDataAddReleaseSkillID(builder *flatbuffers.Builder, releaseSkillID int32) {
	builder.PrependInt32Slot(1, releaseSkillID, 0)
}
func PlayerDataAddComboCount(builder *flatbuffers.Builder, comboCount int32) {
	builder.PrependInt32Slot(2, comboCount, 0)
}
func PlayerDataAddStartAttackPos(builder *flatbuffers.Builder, startAttackPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(startAttackPos), 0)
}
func PlayerDataAddStartAttackDir(builder *flatbuffers.Builder, startAttackDir flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(startAttackDir), 0)
}
func PlayerDataAddStartAttackTimeStamp(builder *flatbuffers.Builder, startAttackTimeStamp int64) {
	builder.PrependInt64Slot(5, startAttackTimeStamp, 0)
}
func PlayerDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
