// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// [Notify]伤害\损失HP通知
type HPNotify struct {
	_tab flatbuffers.Table
}

func GetRootAsHPNotify(buf []byte, offset flatbuffers.UOffsetT) *HPNotify {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HPNotify{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *HPNotify) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///玩家账号ID
func (rcv *HPNotify) AccountId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家账号ID
///请求进入房间ID
func (rcv *HPNotify) RoomID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///请求进入房间ID
///玩家自身血量变化
func (rcv *HPNotify) PlayerHpD() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家自身血量变化
func (rcv *HPNotify) MutatePlayerHpD(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

///玩家对Boss造成的血量变化
func (rcv *HPNotify) BossHpD(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *HPNotify) BossHpDLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家对Boss造成的血量变化
///boss护甲
func (rcv *HPNotify) BossArmor(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *HPNotify) BossArmorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///boss护甲
/// 本次伤害类型
func (rcv *HPNotify) DamageTyp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 本次伤害类型
func (rcv *HPNotify) MutateDamageTyp(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// 队友血量变化
func (rcv *HPNotify) OthersHpD(obj *PlayerState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(PlayerState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *HPNotify) OthersHpDLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// 队友血量变化
/// self avatar id
func (rcv *HPNotify) AvatarID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// self avatar id
func (rcv *HPNotify) MutateAvatarID(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func HPNotifyStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func HPNotifyAddAccountId(builder *flatbuffers.Builder, accountId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(accountId), 0)
}
func HPNotifyAddRoomID(builder *flatbuffers.Builder, roomID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(roomID), 0)
}
func HPNotifyAddPlayerHpD(builder *flatbuffers.Builder, playerHpD int32) {
	builder.PrependInt32Slot(2, playerHpD, 0)
}
func HPNotifyAddBossHpD(builder *flatbuffers.Builder, bossHpD flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(bossHpD), 0)
}
func HPNotifyStartBossHpDVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HPNotifyAddBossArmor(builder *flatbuffers.Builder, bossArmor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(bossArmor), 0)
}
func HPNotifyStartBossArmorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func HPNotifyAddDamageTyp(builder *flatbuffers.Builder, damageTyp int32) {
	builder.PrependInt32Slot(5, damageTyp, 0)
}
func HPNotifyAddOthersHpD(builder *flatbuffers.Builder, othersHpD flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(othersHpD), 0)
}
func HPNotifyStartOthersHpDVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func HPNotifyAddAvatarID(builder *flatbuffers.Builder, avatarID int32) {
	builder.PrependInt32Slot(7, avatarID, 0)
}
func HPNotifyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
