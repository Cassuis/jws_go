// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Boss数据(结构上和AcDataList表一致)
type AcDataInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsAcDataInfo(buf []byte, offset flatbuffers.UOffsetT) *AcDataInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AcDataInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AcDataInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AcDataInfo) Idx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *AcDataInfo) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcDataInfo) CharacterID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcDataInfo) Typ() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcDataInfo) Idid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcDataInfo) NameIDs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcDataInfo) StageIDs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcDataInfo) Faction() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcDataInfo) IsPlayer() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateIsPlayer(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *AcDataInfo) Speed() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateSpeed(n uint32) bool {
	return rcv._tab.MutateUint32Slot(22, n)
}

func (rcv *AcDataInfo) AngleSpeed() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateAngleSpeed(n uint32) bool {
	return rcv._tab.MutateUint32Slot(24, n)
}

func (rcv *AcDataInfo) HitPoint() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateHitPoint(n uint32) bool {
	return rcv._tab.MutateUint32Slot(26, n)
}

func (rcv *AcDataInfo) HpSectionNum() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateHpSectionNum(n uint32) bool {
	return rcv._tab.MutateUint32Slot(28, n)
}

func (rcv *AcDataInfo) ThresholdMin() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateThresholdMin(n uint32) bool {
	return rcv._tab.MutateUint32Slot(30, n)
}

func (rcv *AcDataInfo) ThresholdMax() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateThresholdMax(n uint32) bool {
	return rcv._tab.MutateUint32Slot(32, n)
}

func (rcv *AcDataInfo) ThresholdRatio() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateThresholdRatio(n uint32) bool {
	return rcv._tab.MutateUint32Slot(34, n)
}

func (rcv *AcDataInfo) Guard() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateGuard(n uint32) bool {
	return rcv._tab.MutateUint32Slot(36, n)
}

func (rcv *AcDataInfo) ShieldAbsorbRate() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AcDataInfo) MutateShieldAbsorbRate(n float32) bool {
	return rcv._tab.MutateFloat32Slot(38, n)
}

func (rcv *AcDataInfo) PhysicalDamage() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutatePhysicalDamage(n uint32) bool {
	return rcv._tab.MutateUint32Slot(40, n)
}

func (rcv *AcDataInfo) PhysicalResist() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutatePhysicalResist(n uint32) bool {
	return rcv._tab.MutateUint32Slot(42, n)
}

func (rcv *AcDataInfo) CritRate() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AcDataInfo) MutateCritRate(n float32) bool {
	return rcv._tab.MutateFloat32Slot(44, n)
}

func (rcv *AcDataInfo) CritDamage() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *AcDataInfo) MutateCritDamage(n float32) bool {
	return rcv._tab.MutateFloat32Slot(46, n)
}

func (rcv *AcDataInfo) Equip1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcDataInfo) Equip2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcDataInfo) Aura() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AcDataInfo) CantbeBlackHole() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateCantbeBlackHole(n uint32) bool {
	return rcv._tab.MutateUint32Slot(54, n)
}

func (rcv *AcDataInfo) CantbeSpecialHit() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AcDataInfo) MutateCantbeSpecialHit(n uint32) bool {
	return rcv._tab.MutateUint32Slot(56, n)
}

func AcDataInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(27)
}
func AcDataInfoAddIdx(builder *flatbuffers.Builder, idx int32) {
	builder.PrependInt32Slot(0, idx, 0)
}
func AcDataInfoAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(id), 0)
}
func AcDataInfoAddCharacterID(builder *flatbuffers.Builder, characterID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(characterID), 0)
}
func AcDataInfoAddTyp(builder *flatbuffers.Builder, typ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(typ), 0)
}
func AcDataInfoAddIdid(builder *flatbuffers.Builder, idid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idid), 0)
}
func AcDataInfoAddNameIDs(builder *flatbuffers.Builder, nameIDs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(nameIDs), 0)
}
func AcDataInfoAddStageIDs(builder *flatbuffers.Builder, stageIDs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(stageIDs), 0)
}
func AcDataInfoAddFaction(builder *flatbuffers.Builder, faction flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(faction), 0)
}
func AcDataInfoAddIsPlayer(builder *flatbuffers.Builder, isPlayer uint32) {
	builder.PrependUint32Slot(8, isPlayer, 0)
}
func AcDataInfoAddSpeed(builder *flatbuffers.Builder, speed uint32) {
	builder.PrependUint32Slot(9, speed, 0)
}
func AcDataInfoAddAngleSpeed(builder *flatbuffers.Builder, angleSpeed uint32) {
	builder.PrependUint32Slot(10, angleSpeed, 0)
}
func AcDataInfoAddHitPoint(builder *flatbuffers.Builder, hitPoint uint32) {
	builder.PrependUint32Slot(11, hitPoint, 0)
}
func AcDataInfoAddHpSectionNum(builder *flatbuffers.Builder, hpSectionNum uint32) {
	builder.PrependUint32Slot(12, hpSectionNum, 0)
}
func AcDataInfoAddThresholdMin(builder *flatbuffers.Builder, thresholdMin uint32) {
	builder.PrependUint32Slot(13, thresholdMin, 0)
}
func AcDataInfoAddThresholdMax(builder *flatbuffers.Builder, thresholdMax uint32) {
	builder.PrependUint32Slot(14, thresholdMax, 0)
}
func AcDataInfoAddThresholdRatio(builder *flatbuffers.Builder, thresholdRatio uint32) {
	builder.PrependUint32Slot(15, thresholdRatio, 0)
}
func AcDataInfoAddGuard(builder *flatbuffers.Builder, guard uint32) {
	builder.PrependUint32Slot(16, guard, 0)
}
func AcDataInfoAddShieldAbsorbRate(builder *flatbuffers.Builder, shieldAbsorbRate float32) {
	builder.PrependFloat32Slot(17, shieldAbsorbRate, 0.0)
}
func AcDataInfoAddPhysicalDamage(builder *flatbuffers.Builder, physicalDamage uint32) {
	builder.PrependUint32Slot(18, physicalDamage, 0)
}
func AcDataInfoAddPhysicalResist(builder *flatbuffers.Builder, physicalResist uint32) {
	builder.PrependUint32Slot(19, physicalResist, 0)
}
func AcDataInfoAddCritRate(builder *flatbuffers.Builder, critRate float32) {
	builder.PrependFloat32Slot(20, critRate, 0.0)
}
func AcDataInfoAddCritDamage(builder *flatbuffers.Builder, critDamage float32) {
	builder.PrependFloat32Slot(21, critDamage, 0.0)
}
func AcDataInfoAddEquip1(builder *flatbuffers.Builder, equip1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(equip1), 0)
}
func AcDataInfoAddEquip2(builder *flatbuffers.Builder, equip2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(equip2), 0)
}
func AcDataInfoAddAura(builder *flatbuffers.Builder, aura flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(aura), 0)
}
func AcDataInfoAddCantbeBlackHole(builder *flatbuffers.Builder, cantbeBlackHole uint32) {
	builder.PrependUint32Slot(25, cantbeBlackHole, 0)
}
func AcDataInfoAddCantbeSpecialHit(builder *flatbuffers.Builder, cantbeSpecialHit uint32) {
	builder.PrependUint32Slot(26, cantbeSpecialHit, 0)
}
func AcDataInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
