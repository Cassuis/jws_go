// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///Boss状态(数组中以Boss数据中的idx为索引)
type BossState struct {
	_tab flatbuffers.Table
}

func GetRootAsBossState(buf []byte, offset flatbuffers.UOffsetT) *BossState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BossState{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BossState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///boss hp
func (rcv *BossState) Hp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///boss hp
func (rcv *BossState) MutateHp(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

///boss 仇恨值(数组中以玩家数据中的idx为索引)
func (rcv *BossState) Hatred(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *BossState) HatredLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///boss 仇恨值(数组中以玩家数据中的idx为索引)
func BossStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BossStateAddHp(builder *flatbuffers.Builder, hp int32) {
	builder.PrependInt32Slot(0, hp, 0)
}
func BossStateAddHatred(builder *flatbuffers.Builder, hatred flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(hatred), 0)
}
func BossStateStartHatredVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BossStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
