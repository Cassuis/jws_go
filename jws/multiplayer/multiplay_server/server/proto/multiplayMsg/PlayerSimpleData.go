// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// [Notify]伤害\损失HP通知
type PlayerSimpleData struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerSimpleData(buf []byte, offset flatbuffers.UOffsetT) *PlayerSimpleData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerSimpleData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PlayerSimpleData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///玩家账号ID
func (rcv *PlayerSimpleData) AccountId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家账号ID
///请求进入房间ID
func (rcv *PlayerSimpleData) RoomID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///请求进入房间ID
func (rcv *PlayerSimpleData) State() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerSimpleData) MutateState(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *PlayerSimpleData) Position(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PlayerSimpleData) Direction(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PlayerSimpleData) CurSpeed() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *PlayerSimpleData) MutateCurSpeed(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *PlayerSimpleData) NotifyTimeStamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerSimpleData) MutateNotifyTimeStamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *PlayerSimpleData) Anim() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerSimpleData) MutateAnim(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *PlayerSimpleData) Hp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerSimpleData) MutateHp(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

func (rcv *PlayerSimpleData) AvatarID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerSimpleData) MutateAvatarID(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func PlayerSimpleDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func PlayerSimpleDataAddAccountId(builder *flatbuffers.Builder, accountId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(accountId), 0)
}
func PlayerSimpleDataAddRoomID(builder *flatbuffers.Builder, roomID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(roomID), 0)
}
func PlayerSimpleDataAddState(builder *flatbuffers.Builder, state int32) {
	builder.PrependInt32Slot(2, state, 0)
}
func PlayerSimpleDataAddPosition(builder *flatbuffers.Builder, position flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(position), 0)
}
func PlayerSimpleDataAddDirection(builder *flatbuffers.Builder, direction flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(direction), 0)
}
func PlayerSimpleDataAddCurSpeed(builder *flatbuffers.Builder, curSpeed float32) {
	builder.PrependFloat32Slot(5, curSpeed, 0.0)
}
func PlayerSimpleDataAddNotifyTimeStamp(builder *flatbuffers.Builder, notifyTimeStamp int64) {
	builder.PrependInt64Slot(6, notifyTimeStamp, 0)
}
func PlayerSimpleDataAddAnim(builder *flatbuffers.Builder, anim int32) {
	builder.PrependInt32Slot(7, anim, 0)
}
func PlayerSimpleDataAddHp(builder *flatbuffers.Builder, hp int64) {
	builder.PrependInt64Slot(8, hp, 0)
}
func PlayerSimpleDataAddAvatarID(builder *flatbuffers.Builder, avatarID int32) {
	builder.PrependInt32Slot(9, avatarID, 0)
}
func PlayerSimpleDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
