// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///玩家数据(结构上和客户端获取到的Account2Client一致)
type AccountInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsAccountInfo(buf []byte, offset flatbuffers.UOffsetT) *AccountInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AccountInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AccountInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///玩家的IDX 对应状态信息中的位置
func (rcv *AccountInfo) Idx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家的IDX 对应状态信息中的位置
func (rcv *AccountInfo) MutateIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

///玩家AccountID
func (rcv *AccountInfo) AccountId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家AccountID
///当前玩家角色
func (rcv *AccountInfo) AvatarId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///当前玩家角色
func (rcv *AccountInfo) MutateAvatarId(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

///战队等级
func (rcv *AccountInfo) CorpLv() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///战队等级
func (rcv *AccountInfo) MutateCorpLv(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

///战队经验
func (rcv *AccountInfo) CorpXp() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///战队经验
func (rcv *AccountInfo) MutateCorpXp(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

///玩家角色觉醒等级
func (rcv *AccountInfo) Arousals(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) ArousalsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家角色觉醒等级
///玩家技能等级
func (rcv *AccountInfo) Skills(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) SkillsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家技能等级
///玩家修炼技能等级
func (rcv *AccountInfo) Skillps(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) SkillpsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家修炼技能等级
///
func (rcv *AccountInfo) HeroStar(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) HeroStarLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///
func (rcv *AccountInfo) HeroLv(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) HeroLvLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家昵称
func (rcv *AccountInfo) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家昵称
///玩家vip等级
func (rcv *AccountInfo) Vip() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家vip等级
func (rcv *AccountInfo) MutateVip(n uint32) bool {
	return rcv._tab.MutateUint32Slot(26, n)
}

///玩家已解锁角色
func (rcv *AccountInfo) Avatarlockeds(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) AvatarlockedsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家已解锁角色
///玩家战队战力
func (rcv *AccountInfo) Gs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家战队战力
func (rcv *AccountInfo) MutateGs(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

///pvp积分
func (rcv *AccountInfo) PvpScore() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///pvp积分
func (rcv *AccountInfo) MutatePvpScore(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

///pvp等级
func (rcv *AccountInfo) PvpRank() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///pvp等级
func (rcv *AccountInfo) MutatePvpRank(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

///玩家装备
func (rcv *AccountInfo) Equips(obj *EquipInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(EquipInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AccountInfo) EquipsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家装备
///装备强化等级
func (rcv *AccountInfo) EquipUpgrade(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) EquipUpgradeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///装备强化等级
///装备升星等级
func (rcv *AccountInfo) EquipStar(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) EquipStarLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///装备升星等级
///玩家当前时装
func (rcv *AccountInfo) AvatarEquips(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) AvatarEquipsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家当前时装
///玩家所有的时装
func (rcv *AccountInfo) AllFashions(obj *FashionItemInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(FashionItemInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AccountInfo) AllFashionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家所有的时装
///玩家当前副将
func (rcv *AccountInfo) Generals(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AccountInfo) GeneralsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家当前副将
///玩家当前副将星级
func (rcv *AccountInfo) Genstar(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) GenstarLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家当前副将星级
///玩家副将羁绊
func (rcv *AccountInfo) Genrels(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AccountInfo) GenrelsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家副将羁绊
///玩家副将羁绊等级
func (rcv *AccountInfo) Genrellv(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) GenrellvLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家副将羁绊等级
///玩家角色宝石
func (rcv *AccountInfo) AvatarJade(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AccountInfo) AvatarJadeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家角色宝石
///玩家神将宝石
func (rcv *AccountInfo) DestGeneralJade(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AccountInfo) DestGeneralJadeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家神将宝石
///玩家当前最高神兽ID
func (rcv *AccountInfo) Dg() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家当前最高神兽ID
func (rcv *AccountInfo) MutateDg(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

///玩家当前最高神兽等级
func (rcv *AccountInfo) Dglv() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家当前最高神兽等级
func (rcv *AccountInfo) MutateDglv(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

///玩家神兽技能
func (rcv *AccountInfo) Dgss(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *AccountInfo) DgssLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///玩家神兽技能
///玩家公会uuid
func (rcv *AccountInfo) Guuid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家公会uuid
///玩家公会名称
func (rcv *AccountInfo) Gname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家公会名称
///玩家公会职务
func (rcv *AccountInfo) Gpos() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家公会职务
func (rcv *AccountInfo) MutateGpos(n int32) bool {
	return rcv._tab.MutateInt32Slot(68, n)
}

///玩家官阶
func (rcv *AccountInfo) Post() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家官阶
///玩家官阶过期时间
func (rcv *AccountInfo) Postt() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///玩家官阶过期时间
func (rcv *AccountInfo) MutatePostt(n int64) bool {
	return rcv._tab.MutateInt64Slot(72, n)
}

/// 主将被动技能
func (rcv *AccountInfo) Pskillid(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AccountInfo) PskillidLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// 主将被动技能
func (rcv *AccountInfo) Cskillid(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AccountInfo) CskillidLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AccountInfo) Tskillid(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AccountInfo) TskillidLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AccountInfo) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccountInfo) Titles(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AccountInfo) TitlesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AccountInfo) HeroAttr(obj *Attr) *Attr {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Attr)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

///玩家当前角色神翼
func (rcv *AccountInfo) HeroSwing() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家当前角色神翼
func (rcv *AccountInfo) MutateHeroSwing(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

///玩家当前灵宠形象
func (rcv *AccountInfo) MagicPetfigure() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家当前灵宠形象
func (rcv *AccountInfo) MutateMagicPetfigure(n uint32) bool {
	return rcv._tab.MutateUint32Slot(88, n)
}

func AccountInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(43)
}
func AccountInfoAddIdx(builder *flatbuffers.Builder, idx int32) {
	builder.PrependInt32Slot(0, idx, 0)
}
func AccountInfoAddAccountId(builder *flatbuffers.Builder, accountId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(accountId), 0)
}
func AccountInfoAddAvatarId(builder *flatbuffers.Builder, avatarId int32) {
	builder.PrependInt32Slot(2, avatarId, 0)
}
func AccountInfoAddCorpLv(builder *flatbuffers.Builder, corpLv uint32) {
	builder.PrependUint32Slot(3, corpLv, 0)
}
func AccountInfoAddCorpXp(builder *flatbuffers.Builder, corpXp uint32) {
	builder.PrependUint32Slot(4, corpXp, 0)
}
func AccountInfoAddArousals(builder *flatbuffers.Builder, arousals flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(arousals), 0)
}
func AccountInfoStartArousalsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddSkills(builder *flatbuffers.Builder, skills flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(skills), 0)
}
func AccountInfoStartSkillsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddSkillps(builder *flatbuffers.Builder, skillps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(skillps), 0)
}
func AccountInfoStartSkillpsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddHeroStar(builder *flatbuffers.Builder, heroStar flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(heroStar), 0)
}
func AccountInfoStartHeroStarVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddHeroLv(builder *flatbuffers.Builder, heroLv flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(heroLv), 0)
}
func AccountInfoStartHeroLvVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(name), 0)
}
func AccountInfoAddVip(builder *flatbuffers.Builder, vip uint32) {
	builder.PrependUint32Slot(11, vip, 0)
}
func AccountInfoAddAvatarlockeds(builder *flatbuffers.Builder, avatarlockeds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(avatarlockeds), 0)
}
func AccountInfoStartAvatarlockedsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddGs(builder *flatbuffers.Builder, gs int32) {
	builder.PrependInt32Slot(13, gs, 0)
}
func AccountInfoAddPvpScore(builder *flatbuffers.Builder, pvpScore int64) {
	builder.PrependInt64Slot(14, pvpScore, 0)
}
func AccountInfoAddPvpRank(builder *flatbuffers.Builder, pvpRank int32) {
	builder.PrependInt32Slot(15, pvpRank, 0)
}
func AccountInfoAddEquips(builder *flatbuffers.Builder, equips flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(equips), 0)
}
func AccountInfoStartEquipsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddEquipUpgrade(builder *flatbuffers.Builder, equipUpgrade flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(equipUpgrade), 0)
}
func AccountInfoStartEquipUpgradeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddEquipStar(builder *flatbuffers.Builder, equipStar flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(equipStar), 0)
}
func AccountInfoStartEquipStarVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddAvatarEquips(builder *flatbuffers.Builder, avatarEquips flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(avatarEquips), 0)
}
func AccountInfoStartAvatarEquipsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddAllFashions(builder *flatbuffers.Builder, allFashions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(allFashions), 0)
}
func AccountInfoStartAllFashionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddGenerals(builder *flatbuffers.Builder, generals flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(generals), 0)
}
func AccountInfoStartGeneralsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddGenstar(builder *flatbuffers.Builder, genstar flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(genstar), 0)
}
func AccountInfoStartGenstarVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddGenrels(builder *flatbuffers.Builder, genrels flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(genrels), 0)
}
func AccountInfoStartGenrelsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddGenrellv(builder *flatbuffers.Builder, genrellv flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(genrellv), 0)
}
func AccountInfoStartGenrellvVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddAvatarJade(builder *flatbuffers.Builder, avatarJade flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(avatarJade), 0)
}
func AccountInfoStartAvatarJadeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddDestGeneralJade(builder *flatbuffers.Builder, destGeneralJade flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(destGeneralJade), 0)
}
func AccountInfoStartDestGeneralJadeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddDg(builder *flatbuffers.Builder, dg int32) {
	builder.PrependInt32Slot(27, dg, 0)
}
func AccountInfoAddDglv(builder *flatbuffers.Builder, dglv int32) {
	builder.PrependInt32Slot(28, dglv, 0)
}
func AccountInfoAddDgss(builder *flatbuffers.Builder, dgss flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(dgss), 0)
}
func AccountInfoStartDgssVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddGuuid(builder *flatbuffers.Builder, guuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(guuid), 0)
}
func AccountInfoAddGname(builder *flatbuffers.Builder, gname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(gname), 0)
}
func AccountInfoAddGpos(builder *flatbuffers.Builder, gpos int32) {
	builder.PrependInt32Slot(32, gpos, 0)
}
func AccountInfoAddPost(builder *flatbuffers.Builder, post flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(post), 0)
}
func AccountInfoAddPostt(builder *flatbuffers.Builder, postt int64) {
	builder.PrependInt64Slot(34, postt, 0)
}
func AccountInfoAddPskillid(builder *flatbuffers.Builder, pskillid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(pskillid), 0)
}
func AccountInfoStartPskillidVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddCskillid(builder *flatbuffers.Builder, cskillid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(cskillid), 0)
}
func AccountInfoStartCskillidVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddTskillid(builder *flatbuffers.Builder, tskillid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(tskillid), 0)
}
func AccountInfoStartTskillidVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(title), 0)
}
func AccountInfoAddTitles(builder *flatbuffers.Builder, titles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(titles), 0)
}
func AccountInfoStartTitlesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AccountInfoAddHeroAttr(builder *flatbuffers.Builder, heroAttr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(heroAttr), 0)
}
func AccountInfoAddHeroSwing(builder *flatbuffers.Builder, heroSwing int32) {
	builder.PrependInt32Slot(41, heroSwing, 0)
}
func AccountInfoAddMagicPetfigure(builder *flatbuffers.Builder, magicPetfigure uint32) {
	builder.PrependUint32Slot(42, magicPetfigure, 0)
}
func AccountInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
