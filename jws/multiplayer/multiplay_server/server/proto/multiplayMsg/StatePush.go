// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// [Push]当前战斗状态
/// multi -> client 战斗信息
type StatePush struct {
	_tab flatbuffers.Table
}

func GetRootAsStatePush(buf []byte, offset flatbuffers.UOffsetT) *StatePush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StatePush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *StatePush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///当前战斗状态(等待开始\已开始\已结束)
func (rcv *StatePush) Stat() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///当前战斗状态(等待开始\已开始\已结束)
func (rcv *StatePush) MutateStat(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

///当前状态开始时间
func (rcv *StatePush) StartTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///当前状态开始时间
func (rcv *StatePush) MutateStartTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

///当前状态结束时间
func (rcv *StatePush) EndTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///当前状态结束时间
func (rcv *StatePush) MutateEndTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *StatePush) GameClass() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StatePush) MutateGameClass(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *StatePush) GameScene() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///当前房间中玩家的状态
func (rcv *StatePush) PlayerStat(obj *PlayerState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(PlayerState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *StatePush) PlayerStatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///当前房间中玩家的状态
///当前房间中Boss的状态
func (rcv *StatePush) BossStat(obj *BossState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(BossState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *StatePush) BossStatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///当前房间中Boss的状态
///boss护甲
func (rcv *StatePush) BossArmor(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *StatePush) BossArmorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

///boss护甲
///玩家上次伤害类型
func (rcv *StatePush) LastDamageTyp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家上次伤害类型
func (rcv *StatePush) MutateLastDamageTyp(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func StatePushStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func StatePushAddStat(builder *flatbuffers.Builder, stat int32) {
	builder.PrependInt32Slot(0, stat, 0)
}
func StatePushAddStartTime(builder *flatbuffers.Builder, startTime int64) {
	builder.PrependInt64Slot(1, startTime, 0)
}
func StatePushAddEndTime(builder *flatbuffers.Builder, endTime int64) {
	builder.PrependInt64Slot(2, endTime, 0)
}
func StatePushAddGameClass(builder *flatbuffers.Builder, GameClass int32) {
	builder.PrependInt32Slot(3, GameClass, 0)
}
func StatePushAddGameScene(builder *flatbuffers.Builder, GameScene flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(GameScene), 0)
}
func StatePushAddPlayerStat(builder *flatbuffers.Builder, playerStat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(playerStat), 0)
}
func StatePushStartPlayerStatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StatePushAddBossStat(builder *flatbuffers.Builder, bossStat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(bossStat), 0)
}
func StatePushStartBossStatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StatePushAddBossArmor(builder *flatbuffers.Builder, bossArmor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(bossArmor), 0)
}
func StatePushStartBossArmorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func StatePushAddLastDamageTyp(builder *flatbuffers.Builder, lastDamageTyp int32) {
	builder.PrependInt32Slot(8, lastDamageTyp, 0)
}
func StatePushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
