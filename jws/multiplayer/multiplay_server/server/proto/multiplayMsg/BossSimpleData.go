// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// [Notify]伤害\损失HP通知
type BossSimpleData struct {
	_tab flatbuffers.Table
}

func GetRootAsBossSimpleData(buf []byte, offset flatbuffers.UOffsetT) *BossSimpleData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BossSimpleData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BossSimpleData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///玩家账号ID
func (rcv *BossSimpleData) AccountId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家账号ID
///请求进入房间ID
func (rcv *BossSimpleData) RoomID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///请求进入房间ID
func (rcv *BossSimpleData) BossState() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BossSimpleData) MutateBossState(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *BossSimpleData) BossPosition(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *BossSimpleData) BossDirection(obj *Vector) *Vector {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Vector)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *BossSimpleData) BossCurSpeed() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BossSimpleData) MutateBossCurSpeed(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *BossSimpleData) BossNotifyTimeStamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BossSimpleData) MutateBossNotifyTimeStamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *BossSimpleData) Anim() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BossSimpleData) MutateAnim(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func BossSimpleDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func BossSimpleDataAddAccountId(builder *flatbuffers.Builder, accountId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(accountId), 0)
}
func BossSimpleDataAddRoomID(builder *flatbuffers.Builder, roomID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(roomID), 0)
}
func BossSimpleDataAddBossState(builder *flatbuffers.Builder, bossState int32) {
	builder.PrependInt32Slot(2, bossState, 0)
}
func BossSimpleDataAddBossPosition(builder *flatbuffers.Builder, bossPosition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(bossPosition), 0)
}
func BossSimpleDataAddBossDirection(builder *flatbuffers.Builder, bossDirection flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(bossDirection), 0)
}
func BossSimpleDataAddBossCurSpeed(builder *flatbuffers.Builder, bossCurSpeed float32) {
	builder.PrependFloat32Slot(5, bossCurSpeed, 0.0)
}
func BossSimpleDataAddBossNotifyTimeStamp(builder *flatbuffers.Builder, bossNotifyTimeStamp int64) {
	builder.PrependInt64Slot(6, bossNotifyTimeStamp, 0)
}
func BossSimpleDataAddAnim(builder *flatbuffers.Builder, anim int32) {
	builder.PrependInt32Slot(7, anim, 0)
}
func BossSimpleDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
