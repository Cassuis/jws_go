// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///[Notify]准备开始战斗
type ReadyMultiplayGameNotify struct {
	_tab flatbuffers.Table
}

func GetRootAsReadyMultiplayGameNotify(buf []byte, offset flatbuffers.UOffsetT) *ReadyMultiplayGameNotify {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReadyMultiplayGameNotify{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ReadyMultiplayGameNotify) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

///玩家账号ID
func (rcv *ReadyMultiplayGameNotify) AccountId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家账号ID
///请求进入房间ID
func (rcv *ReadyMultiplayGameNotify) RoomID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///请求进入房间ID
func (rcv *ReadyMultiplayGameNotify) Latency() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ReadyMultiplayGameNotify) MutateLatency(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// hp
func (rcv *ReadyMultiplayGameNotify) PlayerHP() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// hp
func (rcv *ReadyMultiplayGameNotify) MutatePlayerHP(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *ReadyMultiplayGameNotify) AvatarHP(obj *AvatarHP, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(AvatarHP)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ReadyMultiplayGameNotify) AvatarHPLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ReadyMultiplayGameNotifyStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ReadyMultiplayGameNotifyAddAccountId(builder *flatbuffers.Builder, accountId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(accountId), 0)
}
func ReadyMultiplayGameNotifyAddRoomID(builder *flatbuffers.Builder, roomID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(roomID), 0)
}
func ReadyMultiplayGameNotifyAddLatency(builder *flatbuffers.Builder, latency int32) {
	builder.PrependInt32Slot(2, latency, 0)
}
func ReadyMultiplayGameNotifyAddPlayerHP(builder *flatbuffers.Builder, playerHP int64) {
	builder.PrependInt64Slot(3, playerHP, 0)
}
func ReadyMultiplayGameNotifyAddAvatarHP(builder *flatbuffers.Builder, avatarHP flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(avatarHP), 0)
}
func ReadyMultiplayGameNotifyStartAvatarHPVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ReadyMultiplayGameNotifyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
