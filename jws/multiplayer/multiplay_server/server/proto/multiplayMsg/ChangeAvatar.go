// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///玩家状态(数组中以玩家数据中的idx为索引)
type ChangeAvatar struct {
	_tab flatbuffers.Table
}

func GetRootAsChangeAvatar(buf []byte, offset flatbuffers.UOffsetT) *ChangeAvatar {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChangeAvatar{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ChangeAvatar) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChangeAvatar) AccountID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///玩家状态 1-掉线 2-已退出 3-未准备 4-已准备 5-已死亡 6-战斗中
func (rcv *ChangeAvatar) State() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家状态 1-掉线 2-已退出 3-未准备 4-已准备 5-已死亡 6-战斗中
func (rcv *ChangeAvatar) MutateState(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// maxhp
func (rcv *ChangeAvatar) MaxHp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// maxhp
func (rcv *ChangeAvatar) MutateMaxHp(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

///玩家hp
func (rcv *ChangeAvatar) Hp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///玩家hp
func (rcv *ChangeAvatar) MutateHp(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// avatar id
func (rcv *ChangeAvatar) AvatarID() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// avatar id
func (rcv *ChangeAvatar) MutateAvatarID(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func ChangeAvatarStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ChangeAvatarAddAccountID(builder *flatbuffers.Builder, AccountID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(AccountID), 0)
}
func ChangeAvatarAddState(builder *flatbuffers.Builder, state int32) {
	builder.PrependInt32Slot(1, state, 0)
}
func ChangeAvatarAddMaxHp(builder *flatbuffers.Builder, maxHp int32) {
	builder.PrependInt32Slot(2, maxHp, 0)
}
func ChangeAvatarAddHp(builder *flatbuffers.Builder, hp int32) {
	builder.PrependInt32Slot(3, hp, 0)
}
func ChangeAvatarAddAvatarID(builder *flatbuffers.Builder, avatarID int32) {
	builder.PrependInt32Slot(4, avatarID, 0)
}
func ChangeAvatarEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
