// automatically generated by the FlatBuffers compiler, do not modify

package multiplayMsg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetGameDatasRsp struct {
	_tab flatbuffers.Table
}

func GetRootAsGetGameDatasRsp(buf []byte, offset flatbuffers.UOffsetT) *GetGameDatasRsp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetGameDatasRsp{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GetGameDatasRsp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetGameDatasRsp) Stat() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetGameDatasRsp) MutateStat(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *GetGameDatasRsp) StartTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetGameDatasRsp) MutateStartTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *GetGameDatasRsp) EndTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetGameDatasRsp) MutateEndTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *GetGameDatasRsp) GameClass() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetGameDatasRsp) MutateGameClass(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *GetGameDatasRsp) GameScene() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetGameDatasRsp) PlayerStat(obj *PlayerState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(PlayerState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GetGameDatasRsp) PlayerStatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GetGameDatasRsp) BossStat(obj *BossState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(BossState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GetGameDatasRsp) BossStatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GetGameDatasRsp) AccDatas(obj *AccountInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(AccountInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GetGameDatasRsp) AccDatasLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GetGameDatasRsp) AcDatas(obj *AcDataInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(AcDataInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GetGameDatasRsp) AcDatasLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func GetGameDatasRspStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func GetGameDatasRspAddStat(builder *flatbuffers.Builder, stat int32) {
	builder.PrependInt32Slot(0, stat, 0)
}
func GetGameDatasRspAddStartTime(builder *flatbuffers.Builder, startTime int64) {
	builder.PrependInt64Slot(1, startTime, 0)
}
func GetGameDatasRspAddEndTime(builder *flatbuffers.Builder, endTime int64) {
	builder.PrependInt64Slot(2, endTime, 0)
}
func GetGameDatasRspAddGameClass(builder *flatbuffers.Builder, GameClass int32) {
	builder.PrependInt32Slot(3, GameClass, 0)
}
func GetGameDatasRspAddGameScene(builder *flatbuffers.Builder, GameScene flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(GameScene), 0)
}
func GetGameDatasRspAddPlayerStat(builder *flatbuffers.Builder, playerStat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(playerStat), 0)
}
func GetGameDatasRspStartPlayerStatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GetGameDatasRspAddBossStat(builder *flatbuffers.Builder, bossStat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(bossStat), 0)
}
func GetGameDatasRspStartBossStatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GetGameDatasRspAddAccDatas(builder *flatbuffers.Builder, accDatas flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(accDatas), 0)
}
func GetGameDatasRspStartAccDatasVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GetGameDatasRspAddAcDatas(builder *flatbuffers.Builder, acDatas flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(acDatas), 0)
}
func GetGameDatasRspStartAcDatasVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GetGameDatasRspEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
