// Code generated by protoc-gen-go.
// source: ProtobufGen_hcinfluence.proto
// DO NOT EDIT!

package ProtobufGen

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type HCINFLUENCE struct {
	// * 购买钻
	HC_Buy *float32 `protobuf:"fixed32,1,req,def=0" json:"HC_Buy,omitempty"`
	// * 奖励钻
	HC_Give *float32 `protobuf:"fixed32,2,req,def=0" json:"HC_Give,omitempty"`
	// * 补偿钻
	HC_Compensate    *float32 `protobuf:"fixed32,3,req,def=0" json:"HC_Compensate,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *HCINFLUENCE) Reset()         { *m = HCINFLUENCE{} }
func (m *HCINFLUENCE) String() string { return proto.CompactTextString(m) }
func (*HCINFLUENCE) ProtoMessage()    {}

const Default_HCINFLUENCE_HC_Buy float32 = 0
const Default_HCINFLUENCE_HC_Give float32 = 0
const Default_HCINFLUENCE_HC_Compensate float32 = 0

func (m *HCINFLUENCE) GetHC_Buy() float32 {
	if m != nil && m.HC_Buy != nil {
		return *m.HC_Buy
	}
	return Default_HCINFLUENCE_HC_Buy
}

func (m *HCINFLUENCE) GetHC_Give() float32 {
	if m != nil && m.HC_Give != nil {
		return *m.HC_Give
	}
	return Default_HCINFLUENCE_HC_Give
}

func (m *HCINFLUENCE) GetHC_Compensate() float32 {
	if m != nil && m.HC_Compensate != nil {
		return *m.HC_Compensate
	}
	return Default_HCINFLUENCE_HC_Compensate
}

type HCINFLUENCE_ARRAY struct {
	Items            []*HCINFLUENCE `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *HCINFLUENCE_ARRAY) Reset()         { *m = HCINFLUENCE_ARRAY{} }
func (m *HCINFLUENCE_ARRAY) String() string { return proto.CompactTextString(m) }
func (*HCINFLUENCE_ARRAY) ProtoMessage()    {}

func (m *HCINFLUENCE_ARRAY) GetItems() []*HCINFLUENCE {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
}
