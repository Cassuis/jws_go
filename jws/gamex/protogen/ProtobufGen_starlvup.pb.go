// Code generated by protoc-gen-go.
// source: ProtobufGen_starlvup.proto
// DO NOT EDIT!

package ProtobufGen

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type STARLVUP struct {
	// * 强化等级
	StarLV *uint32 `protobuf:"varint,1,req,def=0" json:"StarLV,omitempty"`
	// * 升星累计加成百分比
	Addition *float32 `protobuf:"fixed32,2,req,def=0" json:"Addition,omitempty"`
	// * 升星成功率
	StarLVUpRate *float32 `protobuf:"fixed32,3,opt,def=0" json:"StarLVUpRate,omitempty"`
	// * 升星失败是否降星
	IsStarLVDown *uint32 `protobuf:"varint,4,opt,def=0" json:"IsStarLVDown,omitempty"`
	// * 必须的材料
	EssentialMaterial *string `protobuf:"bytes,5,opt,def=" json:"EssentialMaterial,omitempty"`
	// * 必须材料的数量
	EssentialCount *uint32 `protobuf:"varint,6,opt,def=0" json:"EssentialCount,omitempty"`
	// * 保星符ID
	BlessMaterial *string `protobuf:"bytes,7,opt,def=" json:"BlessMaterial,omitempty"`
	// * 保星符数量
	BlessCount *uint32 `protobuf:"varint,8,opt,def=0" json:"BlessCount,omitempty"`
	// * 需要的软通数量
	SCCost *uint32 `protobuf:"varint,9,opt,def=0" json:"SCCost,omitempty"`
	// * 用保星符失败增加的祝福值
	StarBless *uint32 `protobuf:"varint,10,opt,def=0" json:"StarBless,omitempty"`
	// * 祝福值最大值
	StarBlessMax *uint32 `protobuf:"varint,11,opt,def=0" json:"StarBlessMax,omitempty"`
	// * 战队等级
	CorpLVLimit      *uint32 `protobuf:"varint,12,opt,def=0" json:"CorpLVLimit,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *STARLVUP) Reset()         { *m = STARLVUP{} }
func (m *STARLVUP) String() string { return proto.CompactTextString(m) }
func (*STARLVUP) ProtoMessage()    {}

const Default_STARLVUP_StarLV uint32 = 0
const Default_STARLVUP_Addition float32 = 0
const Default_STARLVUP_StarLVUpRate float32 = 0
const Default_STARLVUP_IsStarLVDown uint32 = 0
const Default_STARLVUP_EssentialCount uint32 = 0
const Default_STARLVUP_BlessCount uint32 = 0
const Default_STARLVUP_SCCost uint32 = 0
const Default_STARLVUP_StarBless uint32 = 0
const Default_STARLVUP_StarBlessMax uint32 = 0
const Default_STARLVUP_CorpLVLimit uint32 = 0

func (m *STARLVUP) GetStarLV() uint32 {
	if m != nil && m.StarLV != nil {
		return *m.StarLV
	}
	return Default_STARLVUP_StarLV
}

func (m *STARLVUP) GetAddition() float32 {
	if m != nil && m.Addition != nil {
		return *m.Addition
	}
	return Default_STARLVUP_Addition
}

func (m *STARLVUP) GetStarLVUpRate() float32 {
	if m != nil && m.StarLVUpRate != nil {
		return *m.StarLVUpRate
	}
	return Default_STARLVUP_StarLVUpRate
}

func (m *STARLVUP) GetIsStarLVDown() uint32 {
	if m != nil && m.IsStarLVDown != nil {
		return *m.IsStarLVDown
	}
	return Default_STARLVUP_IsStarLVDown
}

func (m *STARLVUP) GetEssentialMaterial() string {
	if m != nil && m.EssentialMaterial != nil {
		return *m.EssentialMaterial
	}
	return ""
}

func (m *STARLVUP) GetEssentialCount() uint32 {
	if m != nil && m.EssentialCount != nil {
		return *m.EssentialCount
	}
	return Default_STARLVUP_EssentialCount
}

func (m *STARLVUP) GetBlessMaterial() string {
	if m != nil && m.BlessMaterial != nil {
		return *m.BlessMaterial
	}
	return ""
}

func (m *STARLVUP) GetBlessCount() uint32 {
	if m != nil && m.BlessCount != nil {
		return *m.BlessCount
	}
	return Default_STARLVUP_BlessCount
}

func (m *STARLVUP) GetSCCost() uint32 {
	if m != nil && m.SCCost != nil {
		return *m.SCCost
	}
	return Default_STARLVUP_SCCost
}

func (m *STARLVUP) GetStarBless() uint32 {
	if m != nil && m.StarBless != nil {
		return *m.StarBless
	}
	return Default_STARLVUP_StarBless
}

func (m *STARLVUP) GetStarBlessMax() uint32 {
	if m != nil && m.StarBlessMax != nil {
		return *m.StarBlessMax
	}
	return Default_STARLVUP_StarBlessMax
}

func (m *STARLVUP) GetCorpLVLimit() uint32 {
	if m != nil && m.CorpLVLimit != nil {
		return *m.CorpLVLimit
	}
	return Default_STARLVUP_CorpLVLimit
}

type STARLVUP_ARRAY struct {
	Items            []*STARLVUP `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *STARLVUP_ARRAY) Reset()         { *m = STARLVUP_ARRAY{} }
func (m *STARLVUP_ARRAY) String() string { return proto.CompactTextString(m) }
func (*STARLVUP_ARRAY) ProtoMessage()    {}

func (m *STARLVUP_ARRAY) GetItems() []*STARLVUP {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
}
