// Code generated by protoc-gen-go.
// source: ProtobufGen_fenghuoconfig.proto
// DO NOT EDIT!

package ProtobufGen

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type FENGHUOCONFIG struct {
	// * 组队最高可以花钻至几倍（每日前两次免费加一倍不计算在此数内）
	NumLimitTeamCostHC *uint32 `protobuf:"varint,3,opt,def=0" json:"NumLimitTeamCostHC,omitempty"`
	// * 小关卡获得免费复活次数的概率（100%=100）
	SubLevelFreeRevivalChance *uint32 `protobuf:"varint,14,opt,def=0" json:"SubLevelFreeRevivalChance,omitempty"`
	// * 最多获得免费复活次数上限
	FreeRevivalNumLimit *uint32                   `protobuf:"varint,12,opt,def=0" json:"FreeRevivalNumLimit,omitempty"`
	BuffData_Table      []*FENGHUOCONFIG_BuffData `protobuf:"bytes,13,rep" json:"BuffData_Table,omitempty"`
	// * 组队每小关金币消耗(作废)
	TeamLittleLevelCostSC *uint32 `protobuf:"varint,1,opt,def=0" json:"TeamLittleLevelCostSC,omitempty"`
	// * 组队额外1倍小关钻石消耗（1倍不消耗钻）作废
	TeamLittleLevelCostHC *uint32 `protobuf:"varint,2,opt,def=0" json:"TeamLittleLevelCostHC,omitempty"`
	// * 单人每小关金币消耗(作废)
	SoloLittleLevelCostSC *uint32 `protobuf:"varint,6,opt,def=0" json:"SoloLittleLevelCostSC,omitempty"`
	// * 单人扫荡每轮消耗钻石(作废)
	SoloSweepEachRound *uint32 `protobuf:"varint,7,opt,def=0" json:"SoloSweepEachRound,omitempty"`
	// * 单人高级扫荡每轮消耗钻石(作废)
	SoloVIPSweepCostHCEachRound *uint32 `protobuf:"varint,10,opt,def=0" json:"SoloVIPSweepCostHCEachRound,omitempty"`
	// * 每天重置时间
	RestartTime *uint32 `protobuf:"varint,4,opt,def=0" json:"RestartTime,omitempty"`
	// * 每天前X轮免费+1倍掉落奖励
	ExtraFreeReWardNum *uint32 `protobuf:"varint,5,opt,def=0" json:"ExtraFreeReWardNum,omitempty"`
	// * 单人高级扫荡免费次数
	SoloVIPSweepEachRound *uint32 `protobuf:"varint,8,opt,def=0" json:"SoloVIPSweepEachRound,omitempty"`
	// * 单人高级扫荡每天限制次数
	SoloVIPSweepNum  *uint32 `protobuf:"varint,9,opt,def=0" json:"SoloVIPSweepNum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FENGHUOCONFIG) Reset()         { *m = FENGHUOCONFIG{} }
func (m *FENGHUOCONFIG) String() string { return proto.CompactTextString(m) }
func (*FENGHUOCONFIG) ProtoMessage()    {}

const Default_FENGHUOCONFIG_NumLimitTeamCostHC uint32 = 0
const Default_FENGHUOCONFIG_SubLevelFreeRevivalChance uint32 = 0
const Default_FENGHUOCONFIG_FreeRevivalNumLimit uint32 = 0
const Default_FENGHUOCONFIG_TeamLittleLevelCostSC uint32 = 0
const Default_FENGHUOCONFIG_TeamLittleLevelCostHC uint32 = 0
const Default_FENGHUOCONFIG_SoloLittleLevelCostSC uint32 = 0
const Default_FENGHUOCONFIG_SoloSweepEachRound uint32 = 0
const Default_FENGHUOCONFIG_SoloVIPSweepCostHCEachRound uint32 = 0
const Default_FENGHUOCONFIG_RestartTime uint32 = 0
const Default_FENGHUOCONFIG_ExtraFreeReWardNum uint32 = 0
const Default_FENGHUOCONFIG_SoloVIPSweepEachRound uint32 = 0
const Default_FENGHUOCONFIG_SoloVIPSweepNum uint32 = 0

func (m *FENGHUOCONFIG) GetNumLimitTeamCostHC() uint32 {
	if m != nil && m.NumLimitTeamCostHC != nil {
		return *m.NumLimitTeamCostHC
	}
	return Default_FENGHUOCONFIG_NumLimitTeamCostHC
}

func (m *FENGHUOCONFIG) GetSubLevelFreeRevivalChance() uint32 {
	if m != nil && m.SubLevelFreeRevivalChance != nil {
		return *m.SubLevelFreeRevivalChance
	}
	return Default_FENGHUOCONFIG_SubLevelFreeRevivalChance
}

func (m *FENGHUOCONFIG) GetFreeRevivalNumLimit() uint32 {
	if m != nil && m.FreeRevivalNumLimit != nil {
		return *m.FreeRevivalNumLimit
	}
	return Default_FENGHUOCONFIG_FreeRevivalNumLimit
}

func (m *FENGHUOCONFIG) GetBuffData_Table() []*FENGHUOCONFIG_BuffData {
	if m != nil {
		return m.BuffData_Table
	}
	return nil
}

func (m *FENGHUOCONFIG) GetTeamLittleLevelCostSC() uint32 {
	if m != nil && m.TeamLittleLevelCostSC != nil {
		return *m.TeamLittleLevelCostSC
	}
	return Default_FENGHUOCONFIG_TeamLittleLevelCostSC
}

func (m *FENGHUOCONFIG) GetTeamLittleLevelCostHC() uint32 {
	if m != nil && m.TeamLittleLevelCostHC != nil {
		return *m.TeamLittleLevelCostHC
	}
	return Default_FENGHUOCONFIG_TeamLittleLevelCostHC
}

func (m *FENGHUOCONFIG) GetSoloLittleLevelCostSC() uint32 {
	if m != nil && m.SoloLittleLevelCostSC != nil {
		return *m.SoloLittleLevelCostSC
	}
	return Default_FENGHUOCONFIG_SoloLittleLevelCostSC
}

func (m *FENGHUOCONFIG) GetSoloSweepEachRound() uint32 {
	if m != nil && m.SoloSweepEachRound != nil {
		return *m.SoloSweepEachRound
	}
	return Default_FENGHUOCONFIG_SoloSweepEachRound
}

func (m *FENGHUOCONFIG) GetSoloVIPSweepCostHCEachRound() uint32 {
	if m != nil && m.SoloVIPSweepCostHCEachRound != nil {
		return *m.SoloVIPSweepCostHCEachRound
	}
	return Default_FENGHUOCONFIG_SoloVIPSweepCostHCEachRound
}

func (m *FENGHUOCONFIG) GetRestartTime() uint32 {
	if m != nil && m.RestartTime != nil {
		return *m.RestartTime
	}
	return Default_FENGHUOCONFIG_RestartTime
}

func (m *FENGHUOCONFIG) GetExtraFreeReWardNum() uint32 {
	if m != nil && m.ExtraFreeReWardNum != nil {
		return *m.ExtraFreeReWardNum
	}
	return Default_FENGHUOCONFIG_ExtraFreeReWardNum
}

func (m *FENGHUOCONFIG) GetSoloVIPSweepEachRound() uint32 {
	if m != nil && m.SoloVIPSweepEachRound != nil {
		return *m.SoloVIPSweepEachRound
	}
	return Default_FENGHUOCONFIG_SoloVIPSweepEachRound
}

func (m *FENGHUOCONFIG) GetSoloVIPSweepNum() uint32 {
	if m != nil && m.SoloVIPSweepNum != nil {
		return *m.SoloVIPSweepNum
	}
	return Default_FENGHUOCONFIG_SoloVIPSweepNum
}

type FENGHUOCONFIG_BuffData struct {
	// * 增益buff
	BuffID           *string `protobuf:"bytes,1,req,def=" json:"BuffID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FENGHUOCONFIG_BuffData) Reset()         { *m = FENGHUOCONFIG_BuffData{} }
func (m *FENGHUOCONFIG_BuffData) String() string { return proto.CompactTextString(m) }
func (*FENGHUOCONFIG_BuffData) ProtoMessage()    {}

func (m *FENGHUOCONFIG_BuffData) GetBuffID() string {
	if m != nil && m.BuffID != nil {
		return *m.BuffID
	}
	return ""
}

type FENGHUOCONFIG_ARRAY struct {
	Items            []*FENGHUOCONFIG `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *FENGHUOCONFIG_ARRAY) Reset()         { *m = FENGHUOCONFIG_ARRAY{} }
func (m *FENGHUOCONFIG_ARRAY) String() string { return proto.CompactTextString(m) }
func (*FENGHUOCONFIG_ARRAY) ProtoMessage()    {}

func (m *FENGHUOCONFIG_ARRAY) GetItems() []*FENGHUOCONFIG {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
}
