// Code generated by protoc-gen-go.
// source: ProtobufGen_euiptrickrule.proto
// DO NOT EDIT!

package ProtobufGen

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type EUIPTRICKRULE struct {
	// * 随机属性筛选规则
	TrickRuleID *string `protobuf:"bytes,1,req,def=" json:"TrickRuleID,omitempty"`
	// * 属性类型
	TrickType *uint32 `protobuf:"varint,2,opt,def=0" json:"TrickType,omitempty"`
	// * 属性ID
	TrickID *string `protobuf:"bytes,3,opt,def=" json:"TrickID,omitempty"`
	// * 权重
	Weight           *uint32 `protobuf:"varint,4,opt,def=0" json:"Weight,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EUIPTRICKRULE) Reset()         { *m = EUIPTRICKRULE{} }
func (m *EUIPTRICKRULE) String() string { return proto.CompactTextString(m) }
func (*EUIPTRICKRULE) ProtoMessage()    {}

const Default_EUIPTRICKRULE_TrickType uint32 = 0
const Default_EUIPTRICKRULE_Weight uint32 = 0

func (m *EUIPTRICKRULE) GetTrickRuleID() string {
	if m != nil && m.TrickRuleID != nil {
		return *m.TrickRuleID
	}
	return ""
}

func (m *EUIPTRICKRULE) GetTrickType() uint32 {
	if m != nil && m.TrickType != nil {
		return *m.TrickType
	}
	return Default_EUIPTRICKRULE_TrickType
}

func (m *EUIPTRICKRULE) GetTrickID() string {
	if m != nil && m.TrickID != nil {
		return *m.TrickID
	}
	return ""
}

func (m *EUIPTRICKRULE) GetWeight() uint32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return Default_EUIPTRICKRULE_Weight
}

type EUIPTRICKRULE_ARRAY struct {
	Items            []*EUIPTRICKRULE `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *EUIPTRICKRULE_ARRAY) Reset()         { *m = EUIPTRICKRULE_ARRAY{} }
func (m *EUIPTRICKRULE_ARRAY) String() string { return proto.CompactTextString(m) }
func (*EUIPTRICKRULE_ARRAY) ProtoMessage()    {}

func (m *EUIPTRICKRULE_ARRAY) GetItems() []*EUIPTRICKRULE {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
}
