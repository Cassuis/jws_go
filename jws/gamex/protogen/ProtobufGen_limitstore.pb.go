// Code generated by protoc-gen-go.
// source: ProtobufGen_limitstore.proto
// DO NOT EDIT!

package ProtobufGen

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type LIMITSTORE struct {
	// * 限购商店ID
	PromotionID *uint32 `protobuf:"varint,1,req,def=0" json:"PromotionID,omitempty"`
	// * 活动类型
	PromotionType *uint32 `protobuf:"varint,2,opt,def=0" json:"PromotionType,omitempty"`
	// * 开启参数
	OpeningParameters *uint32 `protobuf:"varint,3,opt,def=0" json:"OpeningParameters,omitempty"`
	// * 购买所需物品ID
	CoinItemID *string `protobuf:"bytes,4,opt,def=VI_HC" json:"CoinItemID,omitempty"`
	// * 商品名称
	GoodsName *string `protobuf:"bytes,5,opt,def=" json:"GoodsName,omitempty"`
	// * 是否为礼包
	GoodsType *uint32 `protobuf:"varint,6,opt,def=0" json:"GoodsType,omitempty"`
	// * 礼包图标
	GoodsIcon *string `protobuf:"bytes,7,opt,def=" json:"GoodsIcon,omitempty"`
	// * 现价
	CurrentPrice *uint32 `protobuf:"varint,8,opt,def=0" json:"CurrentPrice,omitempty"`
	// * 原价
	OriginalCost *uint32 `protobuf:"varint,9,opt,def=0" json:"OriginalCost,omitempty"`
	// * 购买所需的VIP等级
	VIPLimit *uint32 `protobuf:"varint,10,opt,def=0" json:"VIPLimit,omitempty"`
	// * 限购数量
	CountLimit *uint32 `protobuf:"varint,11,opt,def=0" json:"CountLimit,omitempty"`
	// * 任务获得的活跃值
	ActiveValue      *uint32            `protobuf:"varint,12,opt,def=0" json:"ActiveValue,omitempty"`
	Fixed_Loot       []*LIMITSTORE_Loot `protobuf:"bytes,13,rep" json:"Fixed_Loot,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *LIMITSTORE) Reset()         { *m = LIMITSTORE{} }
func (m *LIMITSTORE) String() string { return proto.CompactTextString(m) }
func (*LIMITSTORE) ProtoMessage()    {}

const Default_LIMITSTORE_PromotionID uint32 = 0
const Default_LIMITSTORE_PromotionType uint32 = 0
const Default_LIMITSTORE_OpeningParameters uint32 = 0
const Default_LIMITSTORE_CoinItemID string = "VI_HC"
const Default_LIMITSTORE_GoodsType uint32 = 0
const Default_LIMITSTORE_CurrentPrice uint32 = 0
const Default_LIMITSTORE_OriginalCost uint32 = 0
const Default_LIMITSTORE_VIPLimit uint32 = 0
const Default_LIMITSTORE_CountLimit uint32 = 0
const Default_LIMITSTORE_ActiveValue uint32 = 0

func (m *LIMITSTORE) GetPromotionID() uint32 {
	if m != nil && m.PromotionID != nil {
		return *m.PromotionID
	}
	return Default_LIMITSTORE_PromotionID
}

func (m *LIMITSTORE) GetPromotionType() uint32 {
	if m != nil && m.PromotionType != nil {
		return *m.PromotionType
	}
	return Default_LIMITSTORE_PromotionType
}

func (m *LIMITSTORE) GetOpeningParameters() uint32 {
	if m != nil && m.OpeningParameters != nil {
		return *m.OpeningParameters
	}
	return Default_LIMITSTORE_OpeningParameters
}

func (m *LIMITSTORE) GetCoinItemID() string {
	if m != nil && m.CoinItemID != nil {
		return *m.CoinItemID
	}
	return Default_LIMITSTORE_CoinItemID
}

func (m *LIMITSTORE) GetGoodsName() string {
	if m != nil && m.GoodsName != nil {
		return *m.GoodsName
	}
	return ""
}

func (m *LIMITSTORE) GetGoodsType() uint32 {
	if m != nil && m.GoodsType != nil {
		return *m.GoodsType
	}
	return Default_LIMITSTORE_GoodsType
}

func (m *LIMITSTORE) GetGoodsIcon() string {
	if m != nil && m.GoodsIcon != nil {
		return *m.GoodsIcon
	}
	return ""
}

func (m *LIMITSTORE) GetCurrentPrice() uint32 {
	if m != nil && m.CurrentPrice != nil {
		return *m.CurrentPrice
	}
	return Default_LIMITSTORE_CurrentPrice
}

func (m *LIMITSTORE) GetOriginalCost() uint32 {
	if m != nil && m.OriginalCost != nil {
		return *m.OriginalCost
	}
	return Default_LIMITSTORE_OriginalCost
}

func (m *LIMITSTORE) GetVIPLimit() uint32 {
	if m != nil && m.VIPLimit != nil {
		return *m.VIPLimit
	}
	return Default_LIMITSTORE_VIPLimit
}

func (m *LIMITSTORE) GetCountLimit() uint32 {
	if m != nil && m.CountLimit != nil {
		return *m.CountLimit
	}
	return Default_LIMITSTORE_CountLimit
}

func (m *LIMITSTORE) GetActiveValue() uint32 {
	if m != nil && m.ActiveValue != nil {
		return *m.ActiveValue
	}
	return Default_LIMITSTORE_ActiveValue
}

func (m *LIMITSTORE) GetFixed_Loot() []*LIMITSTORE_Loot {
	if m != nil {
		return m.Fixed_Loot
	}
	return nil
}

type LIMITSTORE_Loot struct {
	// * 物品ID
	ItemID *string `protobuf:"bytes,1,opt,def=" json:"ItemID,omitempty"`
	// * 数量
	GoodsCount       *uint32 `protobuf:"varint,2,opt,def=0" json:"GoodsCount,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LIMITSTORE_Loot) Reset()         { *m = LIMITSTORE_Loot{} }
func (m *LIMITSTORE_Loot) String() string { return proto.CompactTextString(m) }
func (*LIMITSTORE_Loot) ProtoMessage()    {}

const Default_LIMITSTORE_Loot_GoodsCount uint32 = 0

func (m *LIMITSTORE_Loot) GetItemID() string {
	if m != nil && m.ItemID != nil {
		return *m.ItemID
	}
	return ""
}

func (m *LIMITSTORE_Loot) GetGoodsCount() uint32 {
	if m != nil && m.GoodsCount != nil {
		return *m.GoodsCount
	}
	return Default_LIMITSTORE_Loot_GoodsCount
}

type LIMITSTORE_ARRAY struct {
	Items            []*LIMITSTORE `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *LIMITSTORE_ARRAY) Reset()         { *m = LIMITSTORE_ARRAY{} }
func (m *LIMITSTORE_ARRAY) String() string { return proto.CompactTextString(m) }
func (*LIMITSTORE_ARRAY) ProtoMessage()    {}

func (m *LIMITSTORE_ARRAY) GetItems() []*LIMITSTORE {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
}
