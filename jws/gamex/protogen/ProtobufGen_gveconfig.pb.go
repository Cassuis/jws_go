// Code generated by protoc-gen-go.
// source: ProtobufGen_gveconfig.proto
// DO NOT EDIT!

package ProtobufGen

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type GVECONFIG struct {
	// * 活动等待时间（min）
	GEWaitTime *uint32 `protobuf:"varint,1,req,def=0" json:"GEWaitTime,omitempty"`
	// * 几秒后给机器人
	BotTimeMin *uint32 `protobuf:"varint,11,req,def=0" json:"BotTimeMin,omitempty"`
	// * 几秒后给机器人
	BotTimeMax *uint32 `protobuf:"varint,12,req,def=0" json:"BotTimeMax,omitempty"`
	// * 匹配机器人战力下限系数
	GSMin *float32 `protobuf:"fixed32,14,req,def=0" json:"GSMin,omitempty"`
	// * 匹配机器人战力上限系数
	GSMax *float32 `protobuf:"fixed32,15,req,def=0" json:"GSMax,omitempty"`
	// * 每天几点活动开启
	GEStartTime *string `protobuf:"bytes,8,opt,def=" json:"GEStartTime,omitempty"`
	// * 每次活动持续多少分钟
	GEPlayTime *uint32 `protobuf:"varint,2,req,def=0" json:"GEPlayTime,omitempty"`
	// * 重新匹配时间
	ReStartTime *int32 `protobuf:"varint,13,opt,def=0" json:"ReStartTime,omitempty"`
	// * 挑战时间限制（min）
	FightTimeLimit *uint32 `protobuf:"varint,3,req,def=0" json:"FightTimeLimit,omitempty"`
	// * 每日次数(gameExplain用）
	DailyFightTime *uint32 `protobuf:"varint,4,req,def=0" json:"DailyFightTime,omitempty"`
	// * 每日免费双倍次数
	DailyDoubleTime *uint32 `protobuf:"varint,5,req,def=0" json:"DailyDoubleTime,omitempty"`
	// * 普通双倍价格
	DoublePrice *uint32 `protobuf:"varint,6,req,def=0" json:"DoublePrice,omitempty"`
	// * 困难双倍价格
	HardDoublePrice  *uint32               `protobuf:"varint,10,req,def=0" json:"HardDoublePrice,omitempty"`
	Cost             []*GVECONFIG_GoldCost `protobuf:"bytes,7,rep" json:"Cost,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *GVECONFIG) Reset()         { *m = GVECONFIG{} }
func (m *GVECONFIG) String() string { return proto.CompactTextString(m) }
func (*GVECONFIG) ProtoMessage()    {}

const Default_GVECONFIG_GEWaitTime uint32 = 0
const Default_GVECONFIG_BotTimeMin uint32 = 0
const Default_GVECONFIG_BotTimeMax uint32 = 0
const Default_GVECONFIG_GSMin float32 = 0
const Default_GVECONFIG_GSMax float32 = 0
const Default_GVECONFIG_GEPlayTime uint32 = 0
const Default_GVECONFIG_ReStartTime int32 = 0
const Default_GVECONFIG_FightTimeLimit uint32 = 0
const Default_GVECONFIG_DailyFightTime uint32 = 0
const Default_GVECONFIG_DailyDoubleTime uint32 = 0
const Default_GVECONFIG_DoublePrice uint32 = 0
const Default_GVECONFIG_HardDoublePrice uint32 = 0

func (m *GVECONFIG) GetGEWaitTime() uint32 {
	if m != nil && m.GEWaitTime != nil {
		return *m.GEWaitTime
	}
	return Default_GVECONFIG_GEWaitTime
}

func (m *GVECONFIG) GetBotTimeMin() uint32 {
	if m != nil && m.BotTimeMin != nil {
		return *m.BotTimeMin
	}
	return Default_GVECONFIG_BotTimeMin
}

func (m *GVECONFIG) GetBotTimeMax() uint32 {
	if m != nil && m.BotTimeMax != nil {
		return *m.BotTimeMax
	}
	return Default_GVECONFIG_BotTimeMax
}

func (m *GVECONFIG) GetGSMin() float32 {
	if m != nil && m.GSMin != nil {
		return *m.GSMin
	}
	return Default_GVECONFIG_GSMin
}

func (m *GVECONFIG) GetGSMax() float32 {
	if m != nil && m.GSMax != nil {
		return *m.GSMax
	}
	return Default_GVECONFIG_GSMax
}

func (m *GVECONFIG) GetGEStartTime() string {
	if m != nil && m.GEStartTime != nil {
		return *m.GEStartTime
	}
	return ""
}

func (m *GVECONFIG) GetGEPlayTime() uint32 {
	if m != nil && m.GEPlayTime != nil {
		return *m.GEPlayTime
	}
	return Default_GVECONFIG_GEPlayTime
}

func (m *GVECONFIG) GetReStartTime() int32 {
	if m != nil && m.ReStartTime != nil {
		return *m.ReStartTime
	}
	return Default_GVECONFIG_ReStartTime
}

func (m *GVECONFIG) GetFightTimeLimit() uint32 {
	if m != nil && m.FightTimeLimit != nil {
		return *m.FightTimeLimit
	}
	return Default_GVECONFIG_FightTimeLimit
}

func (m *GVECONFIG) GetDailyFightTime() uint32 {
	if m != nil && m.DailyFightTime != nil {
		return *m.DailyFightTime
	}
	return Default_GVECONFIG_DailyFightTime
}

func (m *GVECONFIG) GetDailyDoubleTime() uint32 {
	if m != nil && m.DailyDoubleTime != nil {
		return *m.DailyDoubleTime
	}
	return Default_GVECONFIG_DailyDoubleTime
}

func (m *GVECONFIG) GetDoublePrice() uint32 {
	if m != nil && m.DoublePrice != nil {
		return *m.DoublePrice
	}
	return Default_GVECONFIG_DoublePrice
}

func (m *GVECONFIG) GetHardDoublePrice() uint32 {
	if m != nil && m.HardDoublePrice != nil {
		return *m.HardDoublePrice
	}
	return Default_GVECONFIG_HardDoublePrice
}

func (m *GVECONFIG) GetCost() []*GVECONFIG_GoldCost {
	if m != nil {
		return m.Cost
	}
	return nil
}

type GVECONFIG_GoldCost struct {
	// * 消耗金币
	GCost            *uint32 `protobuf:"varint,1,opt,def=0" json:"GCost,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GVECONFIG_GoldCost) Reset()         { *m = GVECONFIG_GoldCost{} }
func (m *GVECONFIG_GoldCost) String() string { return proto.CompactTextString(m) }
func (*GVECONFIG_GoldCost) ProtoMessage()    {}

const Default_GVECONFIG_GoldCost_GCost uint32 = 0

func (m *GVECONFIG_GoldCost) GetGCost() uint32 {
	if m != nil && m.GCost != nil {
		return *m.GCost
	}
	return Default_GVECONFIG_GoldCost_GCost
}

type GVECONFIG_ARRAY struct {
	Items            []*GVECONFIG `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GVECONFIG_ARRAY) Reset()         { *m = GVECONFIG_ARRAY{} }
func (m *GVECONFIG_ARRAY) String() string { return proto.CompactTextString(m) }
func (*GVECONFIG_ARRAY) ProtoMessage()    {}

func (m *GVECONFIG_ARRAY) GetItems() []*GVECONFIG {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
}
