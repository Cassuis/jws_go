// Code generated by protoc-gen-go.
// source: ProtobufGen_rcconfig.proto
// DO NOT EDIT!

package ProtobufGen

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type RCCONFIG struct {
	// * 敌对军团数量
	OpposeGuildAmount *uint32 `protobuf:"varint,1,req,def=0" json:"OpposeGuildAmount,omitempty"`
	// * 仇人数量
	EnemyAmount *uint32 `protobuf:"varint,2,req,name=enemyAmount,def=0" json:"enemyAmount,omitempty"`
	// * 一键出车每辆红车单价耗钻
	QuickCropsCost *uint32 `protobuf:"varint,3,req,def=0" json:"QuickCropsCost,omitempty"`
	// * 活动开始时间
	StartTime *string `protobuf:"bytes,4,req,def=" json:"StartTime,omitempty"`
	// * 活动结束时间
	EndTime *string `protobuf:"bytes,5,req,def=" json:"EndTime,omitempty"`
	// * 每辆车最多被掠夺次数
	CountLimit *uint32 `protobuf:"varint,6,req,def=0" json:"CountLimit,omitempty"`
	// * 必刷到最高品质粮车的次数
	MaxRefresh *uint32 `protobuf:"varint,7,req,def=0" json:"MaxRefresh,omitempty"`
	// * 关卡ID
	LevelID *string `protobuf:"bytes,8,req,def=" json:"LevelID,omitempty"`
	// * 战斗时限（秒）
	LevelTime *uint32 `protobuf:"varint,9,req,def=0" json:"LevelTime,omitempty"`
	// * 同时请求援助数量上限
	Rescuetimes *uint32 `protobuf:"varint,10,req,def=0" json:"Rescuetimes,omitempty"`
	// * 出车延迟时间（秒）
	DelayTime *uint32 `protobuf:"varint,11,req,def=0" json:"DelayTime,omitempty"`
	// * 日志数量上限
	MaxLogAmount *uint32 `protobuf:"varint,12,req,def=0" json:"MaxLogAmount,omitempty"`
	// * 奖励数量上限
	MaxGiftsAmount *uint32 `protobuf:"varint,13,req,def=0" json:"MaxGiftsAmount,omitempty"`
	// * 玩家进入等级限制
	LevelLimit *uint32 `protobuf:"varint,14,req,def=0" json:"LevelLimit,omitempty"`
	// * 排行榜结算的天数
	RankDay          *uint32 `protobuf:"varint,15,req,def=0" json:"RankDay,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RCCONFIG) Reset()         { *m = RCCONFIG{} }
func (m *RCCONFIG) String() string { return proto.CompactTextString(m) }
func (*RCCONFIG) ProtoMessage()    {}

const Default_RCCONFIG_OpposeGuildAmount uint32 = 0
const Default_RCCONFIG_EnemyAmount uint32 = 0
const Default_RCCONFIG_QuickCropsCost uint32 = 0
const Default_RCCONFIG_CountLimit uint32 = 0
const Default_RCCONFIG_MaxRefresh uint32 = 0
const Default_RCCONFIG_LevelTime uint32 = 0
const Default_RCCONFIG_Rescuetimes uint32 = 0
const Default_RCCONFIG_DelayTime uint32 = 0
const Default_RCCONFIG_MaxLogAmount uint32 = 0
const Default_RCCONFIG_MaxGiftsAmount uint32 = 0
const Default_RCCONFIG_LevelLimit uint32 = 0
const Default_RCCONFIG_RankDay uint32 = 0

func (m *RCCONFIG) GetOpposeGuildAmount() uint32 {
	if m != nil && m.OpposeGuildAmount != nil {
		return *m.OpposeGuildAmount
	}
	return Default_RCCONFIG_OpposeGuildAmount
}

func (m *RCCONFIG) GetEnemyAmount() uint32 {
	if m != nil && m.EnemyAmount != nil {
		return *m.EnemyAmount
	}
	return Default_RCCONFIG_EnemyAmount
}

func (m *RCCONFIG) GetQuickCropsCost() uint32 {
	if m != nil && m.QuickCropsCost != nil {
		return *m.QuickCropsCost
	}
	return Default_RCCONFIG_QuickCropsCost
}

func (m *RCCONFIG) GetStartTime() string {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return ""
}

func (m *RCCONFIG) GetEndTime() string {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return ""
}

func (m *RCCONFIG) GetCountLimit() uint32 {
	if m != nil && m.CountLimit != nil {
		return *m.CountLimit
	}
	return Default_RCCONFIG_CountLimit
}

func (m *RCCONFIG) GetMaxRefresh() uint32 {
	if m != nil && m.MaxRefresh != nil {
		return *m.MaxRefresh
	}
	return Default_RCCONFIG_MaxRefresh
}

func (m *RCCONFIG) GetLevelID() string {
	if m != nil && m.LevelID != nil {
		return *m.LevelID
	}
	return ""
}

func (m *RCCONFIG) GetLevelTime() uint32 {
	if m != nil && m.LevelTime != nil {
		return *m.LevelTime
	}
	return Default_RCCONFIG_LevelTime
}

func (m *RCCONFIG) GetRescuetimes() uint32 {
	if m != nil && m.Rescuetimes != nil {
		return *m.Rescuetimes
	}
	return Default_RCCONFIG_Rescuetimes
}

func (m *RCCONFIG) GetDelayTime() uint32 {
	if m != nil && m.DelayTime != nil {
		return *m.DelayTime
	}
	return Default_RCCONFIG_DelayTime
}

func (m *RCCONFIG) GetMaxLogAmount() uint32 {
	if m != nil && m.MaxLogAmount != nil {
		return *m.MaxLogAmount
	}
	return Default_RCCONFIG_MaxLogAmount
}

func (m *RCCONFIG) GetMaxGiftsAmount() uint32 {
	if m != nil && m.MaxGiftsAmount != nil {
		return *m.MaxGiftsAmount
	}
	return Default_RCCONFIG_MaxGiftsAmount
}

func (m *RCCONFIG) GetLevelLimit() uint32 {
	if m != nil && m.LevelLimit != nil {
		return *m.LevelLimit
	}
	return Default_RCCONFIG_LevelLimit
}

func (m *RCCONFIG) GetRankDay() uint32 {
	if m != nil && m.RankDay != nil {
		return *m.RankDay
	}
	return Default_RCCONFIG_RankDay
}

type RCCONFIG_ARRAY struct {
	Items            []*RCCONFIG `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RCCONFIG_ARRAY) Reset()         { *m = RCCONFIG_ARRAY{} }
func (m *RCCONFIG_ARRAY) String() string { return proto.CompactTextString(m) }
func (*RCCONFIG_ARRAY) ProtoMessage()    {}

func (m *RCCONFIG_ARRAY) GetItems() []*RCCONFIG {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
}
