// Code generated by protoc-gen-go.
// source: ProtobufGen_normalgacha.proto
// DO NOT EDIT!

package ProtobufGen

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type NORMALGACHA struct {
	// * 抽奖ID
	GachaID *uint32 `protobuf:"varint,1,req,def=0" json:"GachaID,omitempty"`
	// * 抽奖类型
	GachaType *uint32 `protobuf:"varint,2,req,def=0" json:"GachaType,omitempty"`
	// * 等级下限
	LevelMin *uint32 `protobuf:"varint,3,opt,def=1" json:"LevelMin,omitempty"`
	// * 等级上限
	LevelMax *uint32 `protobuf:"varint,4,opt,def=200" json:"LevelMax,omitempty"`
	// * 普通物品组
	ItemGroupID1 *uint32 `protobuf:"varint,5,opt,def=0" json:"ItemGroupID1,omitempty"`
	// * 权重
	Weight1 *uint32 `protobuf:"varint,6,opt,def=0" json:"Weight1,omitempty"`
	// * 普通物品组
	ItemGroupID2 *uint32 `protobuf:"varint,7,opt,def=0" json:"ItemGroupID2,omitempty"`
	// * 权重
	Weight2 *uint32 `protobuf:"varint,8,opt,def=0" json:"Weight2,omitempty"`
	// * 普通物品组
	ItemGroupID3 *uint32 `protobuf:"varint,9,opt,def=0" json:"ItemGroupID3,omitempty"`
	// * 权重
	Weight3 *uint32 `protobuf:"varint,10,opt,def=0" json:"Weight3,omitempty"`
	// * 普通物品组
	ItemGroupID4 *uint32 `protobuf:"varint,11,opt,def=0" json:"ItemGroupID4,omitempty"`
	// * 权重
	Weight4 *uint32 `protobuf:"varint,12,opt,def=0" json:"Weight4,omitempty"`
	// * 特殊组ID
	SpecialGroupID *uint32 `protobuf:"varint,13,opt,def=0" json:"SpecialGroupID,omitempty"`
	// * 抽到几次特殊组（N），在Space（M）对应随机次数内
	NumForSpecial *uint32 `protobuf:"varint,14,opt,def=0" json:"NumForSpecial,omitempty"`
	// * 特殊组N/M机制下的分母M
	SpaceForSpecial *uint32 `protobuf:"varint,15,opt,def=0" json:"SpaceForSpecial,omitempty"`
	// * 珍品组ID
	TreasureGroupID *uint32 `protobuf:"varint,16,opt,def=0" json:"TreasureGroupID,omitempty"`
	// * 抽多少次抽特殊组抽一次珍品组
	SpaceForTreasure *uint32 `protobuf:"varint,17,opt,def=0" json:"SpaceForTreasure,omitempty"`
	// * 十连抽奖励序列ID
	RewardSerialID   *uint32 `protobuf:"varint,18,opt,def=0" json:"RewardSerialID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NORMALGACHA) Reset()         { *m = NORMALGACHA{} }
func (m *NORMALGACHA) String() string { return proto.CompactTextString(m) }
func (*NORMALGACHA) ProtoMessage()    {}

const Default_NORMALGACHA_GachaID uint32 = 0
const Default_NORMALGACHA_GachaType uint32 = 0
const Default_NORMALGACHA_LevelMin uint32 = 1
const Default_NORMALGACHA_LevelMax uint32 = 200
const Default_NORMALGACHA_ItemGroupID1 uint32 = 0
const Default_NORMALGACHA_Weight1 uint32 = 0
const Default_NORMALGACHA_ItemGroupID2 uint32 = 0
const Default_NORMALGACHA_Weight2 uint32 = 0
const Default_NORMALGACHA_ItemGroupID3 uint32 = 0
const Default_NORMALGACHA_Weight3 uint32 = 0
const Default_NORMALGACHA_ItemGroupID4 uint32 = 0
const Default_NORMALGACHA_Weight4 uint32 = 0
const Default_NORMALGACHA_SpecialGroupID uint32 = 0
const Default_NORMALGACHA_NumForSpecial uint32 = 0
const Default_NORMALGACHA_SpaceForSpecial uint32 = 0
const Default_NORMALGACHA_TreasureGroupID uint32 = 0
const Default_NORMALGACHA_SpaceForTreasure uint32 = 0
const Default_NORMALGACHA_RewardSerialID uint32 = 0

func (m *NORMALGACHA) GetGachaID() uint32 {
	if m != nil && m.GachaID != nil {
		return *m.GachaID
	}
	return Default_NORMALGACHA_GachaID
}

func (m *NORMALGACHA) GetGachaType() uint32 {
	if m != nil && m.GachaType != nil {
		return *m.GachaType
	}
	return Default_NORMALGACHA_GachaType
}

func (m *NORMALGACHA) GetLevelMin() uint32 {
	if m != nil && m.LevelMin != nil {
		return *m.LevelMin
	}
	return Default_NORMALGACHA_LevelMin
}

func (m *NORMALGACHA) GetLevelMax() uint32 {
	if m != nil && m.LevelMax != nil {
		return *m.LevelMax
	}
	return Default_NORMALGACHA_LevelMax
}

func (m *NORMALGACHA) GetItemGroupID1() uint32 {
	if m != nil && m.ItemGroupID1 != nil {
		return *m.ItemGroupID1
	}
	return Default_NORMALGACHA_ItemGroupID1
}

func (m *NORMALGACHA) GetWeight1() uint32 {
	if m != nil && m.Weight1 != nil {
		return *m.Weight1
	}
	return Default_NORMALGACHA_Weight1
}

func (m *NORMALGACHA) GetItemGroupID2() uint32 {
	if m != nil && m.ItemGroupID2 != nil {
		return *m.ItemGroupID2
	}
	return Default_NORMALGACHA_ItemGroupID2
}

func (m *NORMALGACHA) GetWeight2() uint32 {
	if m != nil && m.Weight2 != nil {
		return *m.Weight2
	}
	return Default_NORMALGACHA_Weight2
}

func (m *NORMALGACHA) GetItemGroupID3() uint32 {
	if m != nil && m.ItemGroupID3 != nil {
		return *m.ItemGroupID3
	}
	return Default_NORMALGACHA_ItemGroupID3
}

func (m *NORMALGACHA) GetWeight3() uint32 {
	if m != nil && m.Weight3 != nil {
		return *m.Weight3
	}
	return Default_NORMALGACHA_Weight3
}

func (m *NORMALGACHA) GetItemGroupID4() uint32 {
	if m != nil && m.ItemGroupID4 != nil {
		return *m.ItemGroupID4
	}
	return Default_NORMALGACHA_ItemGroupID4
}

func (m *NORMALGACHA) GetWeight4() uint32 {
	if m != nil && m.Weight4 != nil {
		return *m.Weight4
	}
	return Default_NORMALGACHA_Weight4
}

func (m *NORMALGACHA) GetSpecialGroupID() uint32 {
	if m != nil && m.SpecialGroupID != nil {
		return *m.SpecialGroupID
	}
	return Default_NORMALGACHA_SpecialGroupID
}

func (m *NORMALGACHA) GetNumForSpecial() uint32 {
	if m != nil && m.NumForSpecial != nil {
		return *m.NumForSpecial
	}
	return Default_NORMALGACHA_NumForSpecial
}

func (m *NORMALGACHA) GetSpaceForSpecial() uint32 {
	if m != nil && m.SpaceForSpecial != nil {
		return *m.SpaceForSpecial
	}
	return Default_NORMALGACHA_SpaceForSpecial
}

func (m *NORMALGACHA) GetTreasureGroupID() uint32 {
	if m != nil && m.TreasureGroupID != nil {
		return *m.TreasureGroupID
	}
	return Default_NORMALGACHA_TreasureGroupID
}

func (m *NORMALGACHA) GetSpaceForTreasure() uint32 {
	if m != nil && m.SpaceForTreasure != nil {
		return *m.SpaceForTreasure
	}
	return Default_NORMALGACHA_SpaceForTreasure
}

func (m *NORMALGACHA) GetRewardSerialID() uint32 {
	if m != nil && m.RewardSerialID != nil {
		return *m.RewardSerialID
	}
	return Default_NORMALGACHA_RewardSerialID
}

type NORMALGACHA_ARRAY struct {
	Items            []*NORMALGACHA `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *NORMALGACHA_ARRAY) Reset()         { *m = NORMALGACHA_ARRAY{} }
func (m *NORMALGACHA_ARRAY) String() string { return proto.CompactTextString(m) }
func (*NORMALGACHA_ARRAY) ProtoMessage()    {}

func (m *NORMALGACHA_ARRAY) GetItems() []*NORMALGACHA {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
}
