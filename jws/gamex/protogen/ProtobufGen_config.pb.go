// Code generated by protoc-gen-go.
// source: ProtobufGen_config.proto
// DO NOT EDIT!

package ProtobufGen

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type CONFIG struct {
	// * 引用ID不要改
	Stdid *uint32 `protobuf:"varint,59,req,def=0" json:"Stdid,omitempty"`
	// * 恢复一点体力所需时间(min)
	EnergyRecover *uint32 `protobuf:"varint,1,req,def=0" json:"EnergyRecover,omitempty"`
	// * 体力囤积最大上限
	MaxEnergy *uint32 `protobuf:"varint,2,req,def=0" json:"MaxEnergy,omitempty"`
	// * 连击衰减常数
	MultiHitConstant *float32 `protobuf:"fixed32,3,req,def=0" json:"MultiHitConstant,omitempty"`
	// * 副将表现临界值
	GoodWillDivide *uint32 `protobuf:"varint,4,req,def=0" json:"GoodWillDivide,omitempty"`
	// * 每次购买获得的体力值
	EnergyUnit *uint32 `protobuf:"varint,5,req,def=0" json:"EnergyUnit,omitempty"`
	// * 每次点金手获得的SC
	SCUnit *uint32 `protobuf:"varint,6,req,def=0" json:"SCUnit,omitempty"`
	// * 天地人相克系数
	SPIRIT_BONUS_PREFER *float32 `protobuf:"fixed32,7,req,def=0" json:"SPIRIT_BONUS_PREFER,omitempty"`
	// * 天地人对无属性相克系数
	SPIRIT_BONUS_NORMAL *float32 `protobuf:"fixed32,8,req,def=0" json:"SPIRIT_BONUS_NORMAL,omitempty"`
	// * PveBoss任务重置时间
	PVEBOSS_TASK_TIME *string `protobuf:"bytes,9,req,def=" json:"PVEBOSS_TASK_TIME,omitempty"`
	// * PveBoss推送时间
	PVEBOSS_PN_TIME *string `protobuf:"bytes,10,req,def=" json:"PVEBOSS_PN_TIME,omitempty"`
	// * 早上送体力
	BreakfastTime *string `protobuf:"bytes,11,req,def=" json:"BreakfastTime,omitempty"`
	// * 中午送体力
	LunchTime *string `protobuf:"bytes,12,req,def=" json:"LunchTime,omitempty"`
	// * 傍晚送体力
	DinnerTime *string `protobuf:"bytes,13,req,def=" json:"DinnerTime,omitempty"`
	// * 晚上送体力
	NightSnackTime *string `protobuf:"bytes,14,req,def=" json:"NightSnackTime,omitempty"`
	// * 周一礼包推送1
	MondayGiftPush1 *string `protobuf:"bytes,94,req,def=" json:"MondayGiftPush1,omitempty"`
	// * 周一礼包推送2
	MondayGiftPush2 *string `protobuf:"bytes,95,req,def=" json:"MondayGiftPush2,omitempty"`
	// * 每次购买获得的精力值
	SprintUnit *uint32 `protobuf:"varint,15,req,def=0" json:"SprintUnit,omitempty"`
	// * 恢复一点军令所需时间(min)
	SpiritRecover *uint32 `protobuf:"varint,16,req,def=0" json:"SpiritRecover,omitempty"`
	// * 军令囤积最大上限
	MaxSpirit *uint32 `protobuf:"varint,17,req,def=0" json:"MaxSpirit,omitempty"`
	// * 战队等级上限
	CorpLevelUpperLimit *uint32 `protobuf:"varint,18,req,def=0" json:"CorpLevelUpperLimit,omitempty"`
	// * 洗炼取消消耗钻石
	AbstractCancel *uint32 `protobuf:"varint,19,req,def=0" json:"AbstractCancel,omitempty"`
	// * UI加载判定时间1(s)
	UI_Loading_Feedback_1 *uint32 `protobuf:"varint,20,req,def=0" json:"UI_Loading_Feedback_1,omitempty"`
	// * UI加载判定时间2(s)
	UI_Loading_Feedback_2 *uint32 `protobuf:"varint,21,req,def=0" json:"UI_Loading_Feedback_2,omitempty"`
	// * 吃经验药时升级弹窗判定
	UI_XPBoost_CheckTime *float32 `protobuf:"fixed32,22,req,def=0" json:"UI_XPBoost_CheckTime,omitempty"`
	// * 转移属性消耗的SC
	ExchangeCost *uint32 `protobuf:"varint,23,req,def=0" json:"ExchangeCost,omitempty"`
	// * PVP单场限时
	BasicPvpTimer *uint32 `protobuf:"varint,24,req,def=0" json:"BasicPvpTimer,omitempty"`
	// * 3v3的每日限定次数
	TPvPDailyLimit *uint32 `protobuf:"varint,62,req,def=0" json:"TPvPDailyLimit,omitempty"`
	// * PvP的每日限定次数
	BasicPvPDailyLimit *uint32 `protobuf:"varint,25,req,def=0" json:"BasicPvPDailyLimit,omitempty"`
	// * PvP上榜角色等级限定
	BasicPvPRankLvReq *uint32 `protobuf:"varint,26,req,def=0" json:"BasicPvPRankLvReq,omitempty"`
	// * 临时礼包等级限定
	TempGiftLvReq *uint32 `protobuf:"varint,27,req,def=0" json:"TempGiftLvReq,omitempty"`
	// * 是否显示兑换码入口
	DisplayGiftCodeEntrance *uint32 `protobuf:"varint,28,req,def=0" json:"DisplayGiftCodeEntrance,omitempty"`
	// * 是否显示navercafe入口
	NaverCafeEntrance *uint32 `protobuf:"varint,103,req,def=0" json:"NaverCafeEntrance,omitempty"`
	// * 创建公会的等级限制
	PresidentLevelLimit *uint32 `protobuf:"varint,29,req,def=0" json:"PresidentLevelLimit,omitempty"`
	// * 创建公会的VIP等级限制
	PresidentVIPLimit *uint32 `protobuf:"varint,30,req,def=0" json:"PresidentVIPLimit,omitempty"`
	// * 创建公会所需软通
	GuildFondSC *uint32 `protobuf:"varint,31,req,def=0" json:"GuildFondSC,omitempty"`
	// * 创建公会所需硬通
	GuildFondHC *uint32 `protobuf:"varint,32,req,def=0" json:"GuildFondHC,omitempty"`
	// * 公会仓库位置上限
	GuildBagRoom *uint32 `protobuf:"varint,58,req,def=0" json:"GuildBagRoom,omitempty"`
	// * 公会同时申请人数上限
	GuildApplicationNumberLimit *uint32 `protobuf:"varint,33,req,def=0" json:"GuildApplicationNumberLimit,omitempty"`
	// * 每日每人贡献活跃值上限
	GuildEXDailyLimit *uint32 `protobuf:"varint,34,req,def=0" json:"GuildEXDailyLimit,omitempty"`
	// * 公会可累计活跃上限
	GuildEXLimit *uint32 `protobuf:"varint,35,req,def=0" json:"GuildEXLimit,omitempty"`
	// * 加入公会等级限制
	GuildNumberLevelLimit *uint32 `protobuf:"varint,36,req,def=0" json:"GuildNumberLevelLimit,omitempty"`
	// * 管理层人数
	ManagementNumber *uint32 `protobuf:"varint,37,req,def=0" json:"ManagementNumber,omitempty"`
	// * 主动退会后多长时间后可申请加入公会（秒）
	GuildApplicationTimeLimit *uint32 `protobuf:"varint,38,req,def=0" json:"GuildApplicationTimeLimit,omitempty"`
	// * 玩家同时申请公会个数上限
	GuildApplyNumLimit *uint32 `protobuf:"varint,39,req,def=0" json:"GuildApplyNumLimit,omitempty"`
	// * 玩家申请公会失效时间（秒）
	GuildApplyTimeLimit *uint32 `protobuf:"varint,40,req,def=0" json:"GuildApplyTimeLimit,omitempty"`
	// * 解锁其他2个主角的关卡
	LevelUnlockOtherRoles *string `protobuf:"bytes,41,req,def=" json:"LevelUnlockOtherRoles,omitempty"`
	// * 装备持有上限
	InventoryCap *uint32 `protobuf:"varint,42,req,def=0" json:"InventoryCap,omitempty"`
	// * 城镇广播可见所需关卡
	BroadcastAvailableStage *string `protobuf:"bytes,43,req,def=" json:"BroadcastAvailableStage,omitempty"`
	// * 爬塔玩法扫荡冷却消耗
	TrialCDTimeCostHC *uint32 `protobuf:"varint,44,req,def=0" json:"TrialCDTimeCostHC,omitempty"`
	// * PVP伤害调整系数
	PvpDmgRate *float32 `protobuf:"fixed32,45,req,def=0.4" json:"PvpDmgRate,omitempty"`
	// * TPVP伤害调整系数
	TPvpDmgRate *float32 `protobuf:"fixed32,46,req,def=0.4" json:"TPvpDmgRate,omitempty"`
	// * WSPVP伤害调整系数
	WSPvpDmgRate *float32 `protobuf:"fixed32,86,req,def=0.4" json:"WSPvpDmgRate,omitempty"`
	// * 远征伤害调整系数
	ExpeditionDmgRate *float32 `protobuf:"fixed32,70,req,def=0.4" json:"ExpeditionDmgRate,omitempty"`
	// * 劫营夺粮伤害系数
	RobCropsDmgRate *float32 `protobuf:"fixed32,92,req,def=0.4" json:"RobCropsDmgRate,omitempty"`
	// * 濒危提示系数
	DangerAlertRate *float32 `protobuf:"fixed32,47,req,def=0" json:"DangerAlertRate,omitempty"`
	// * 死亡提示系数
	DeathAlertRate *float32 `protobuf:"fixed32,48,req,def=0" json:"DeathAlertRate,omitempty"`
	// * 每次购买TPVP的次数
	TPVPUnit *uint32 `protobuf:"varint,49,req,def=0" json:"TPVPUnit,omitempty"`
	// * 龙玉背包数量上限
	JadeLimit *uint32 `protobuf:"varint,50,req,def=0" json:"JadeLimit,omitempty"`
	// * 宣传画的开启条件
	PosterCondition *string `protobuf:"bytes,51,req,def=" json:"PosterCondition,omitempty"`
	// * 登录时广告窗开启间隔（min）
	PosterTime *uint32 `protobuf:"varint,52,req,def=0" json:"PosterTime,omitempty"`
	// * 重连时广告窗开启间隔（min）
	SPPosterTime *uint32 `protobuf:"varint,68,req,def=0" json:"SPPosterTime,omitempty"`
	// * 多少充值钻给一个蛋锤
	HCPerEggKey *uint32 `protobuf:"varint,53,req,def=0" json:"HCPerEggKey,omitempty"`
	// * 玩家膜拜奖励
	WorshipLoot *string `protobuf:"bytes,54,req,def=" json:"WorshipLoot,omitempty"`
	// * 成长基金购买HC
	GrowFundCost *uint32 `protobuf:"varint,55,req,def=0" json:"GrowFundCost,omitempty"`
	// * 神兽连续升级
	DestinyCountinu *uint32 `protobuf:"varint,56,req,def=0" json:"DestinyCountinu,omitempty"`
	// * 组队boss广告间隔时间
	GVEADTime *uint32 `protobuf:"varint,57,req,def=0" json:"GVEADTime,omitempty"`
	// * 获取包子上限数量
	BaoZiGetLimit *uint32 `protobuf:"varint,60,req,def=0" json:"BaoZiGetLimit,omitempty"`
	// * 每次购买获得的体力值
	BaoZiUnit *uint32 `protobuf:"varint,61,req,def=0" json:"BaoZiUnit,omitempty"`
	// * 爬塔跳过战力差
	TrailGSLevelGap *float32 `protobuf:"fixed32,63,req,def=0" json:"TrailGSLevelGap,omitempty"`
	// * 爬塔跳过数量
	TrailGSLevelNum *uint32 `protobuf:"varint,64,req,def=0" json:"TrailGSLevelNum,omitempty"`
	// * 爬塔跳过条件
	TrailGSLevelCon *uint32 `protobuf:"varint,65,req,def=0" json:"TrailGSLevelCon,omitempty"`
	// * 仓库申请条目上限
	BagApplyTime *uint32 `protobuf:"varint,66,req,def=0" json:"BagApplyTime,omitempty"`
	// * 招财进宝跑马灯次数上限
	MoneyGodMsgNL *uint32 `protobuf:"varint,69,req,def=0" json:"MoneyGodMsgNL,omitempty"`
	// * 单人竞技推送时间
	PnTime1V1 *string `protobuf:"bytes,75,req,def=" json:"PnTime1V1,omitempty"`
	// * 三人擂台推送时间
	PnTime3V3 *string `protobuf:"bytes,76,req,def=" json:"PnTime3V3,omitempty"`
	// * 三英讨逆推送时间
	LevelSuppressPnTime *string `protobuf:"bytes,73,req,def=" json:"LevelSuppressPnTime,omitempty"`
	// * 兵临城下推送时间
	TermSysGvePnTime *string `protobuf:"bytes,74,req,def=" json:"TermSysGvePnTime,omitempty"`
	// * 是否显示军团战
	ShowGuildWar *uint32 `protobuf:"varint,67,req,def=0" json:"ShowGuildWar,omitempty"`
	// * 伤害保底系数
	BaseDmgLimitRatio *float32 `protobuf:"fixed32,77,req,def=0" json:"BaseDmgLimitRatio,omitempty"`
	// * 伤害浮动下限系数
	BaseDmgRandomLowerRatio *float32 `protobuf:"fixed32,78,req,def=0" json:"BaseDmgRandomLowerRatio,omitempty"`
	// * 伤害浮动上限系数
	BaseDmgUpperRatio *float32 `protobuf:"fixed32,79,req,def=0" json:"BaseDmgUpperRatio,omitempty"`
	// * 每日领取军团红包上限
	REDPACKETLIMIT *uint32 `protobuf:"varint,80,req,def=0" json:"REDPACKETLIMIT,omitempty"`
	// * 是否显示英雄俱乐部入口
	DisplayHeroClubEntrance *uint32 `protobuf:"varint,81,req,def=0" json:"DisplayHeroClubEntrance,omitempty"`
	// * 军团日志上限
	GuildLogLimit *uint32 `protobuf:"varint,82,req,def=0" json:"GuildLogLimit,omitempty"`
	// * 开服红包可存天数
	ReserveDays *uint32 `protobuf:"varint,83,req,def=0" json:"ReserveDays,omitempty"`
	// * 开服红包领取日期
	ReceiveDay *uint32 `protobuf:"varint,84,req,def=0" json:"ReceiveDay,omitempty"`
	// * 开服红包消耗钻石存入比例
	RedpackeTratio *uint32 `protobuf:"varint,85,req,def=0" json:"RedpackeTratio,omitempty"`
	// * 关注奖励
	FollowUpReward *string `protobuf:"bytes,87,req,def=" json:"FollowUpReward,omitempty"`
	// * 关注奖励数量
	FollowUpRewardCount *uint32 `protobuf:"varint,88,req,def=0" json:"FollowUpRewardCount,omitempty"`
	// * 邀请好友奖励
	FriendInviteReward *string `protobuf:"bytes,89,req,def=" json:"FriendInviteReward,omitempty"`
	// * 邀请好友奖励数量
	FriendInviteRewardCount *uint32 `protobuf:"varint,90,req,def=0" json:"FriendInviteRewardCount,omitempty"`
	// * 新手引导跳过等级
	FTESkip *uint32 `protobuf:"varint,91,req,def=0" json:"FTESkip,omitempty"`
	// * IAP购买的间隔(s)
	IAP_PurchurseCD *uint32 `protobuf:"varint,93,req,def=0" json:"IAP_PurchurseCD,omitempty"`
	// * 补签消耗
	RepairSignCost *uint32 `protobuf:"varint,98,req,def=0" json:"RepairSignCost,omitempty"`
	// * 补签花费货币类型
	RepairSignCoin *string `protobuf:"bytes,99,req,def=" json:"RepairSignCoin,omitempty"`
	// * 最大追回天数
	RecoverDayLimit *uint32 `protobuf:"varint,100,req,def=0" json:"RecoverDayLimit,omitempty"`
	// * 追回开启等级
	RecoverLevel *uint32 `protobuf:"varint,101,req,def=0" json:"RecoverLevel,omitempty"`
	// * 魔神降世快结束提醒
	WorldBossSoonEnd *string `protobuf:"bytes,102,req,def=" json:"WorldBossSoonEnd,omitempty"`
	// * 幸运轮盘气泡提示循环时间（秒）
	WheelPPTime      *string `protobuf:"bytes,105,req,def=" json:"WheelPPTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CONFIG) Reset()         { *m = CONFIG{} }
func (m *CONFIG) String() string { return proto.CompactTextString(m) }
func (*CONFIG) ProtoMessage()    {}

const Default_CONFIG_Stdid uint32 = 0
const Default_CONFIG_EnergyRecover uint32 = 0
const Default_CONFIG_MaxEnergy uint32 = 0
const Default_CONFIG_MultiHitConstant float32 = 0
const Default_CONFIG_GoodWillDivide uint32 = 0
const Default_CONFIG_EnergyUnit uint32 = 0
const Default_CONFIG_SCUnit uint32 = 0
const Default_CONFIG_SPIRIT_BONUS_PREFER float32 = 0
const Default_CONFIG_SPIRIT_BONUS_NORMAL float32 = 0
const Default_CONFIG_SprintUnit uint32 = 0
const Default_CONFIG_SpiritRecover uint32 = 0
const Default_CONFIG_MaxSpirit uint32 = 0
const Default_CONFIG_CorpLevelUpperLimit uint32 = 0
const Default_CONFIG_AbstractCancel uint32 = 0
const Default_CONFIG_UI_Loading_Feedback_1 uint32 = 0
const Default_CONFIG_UI_Loading_Feedback_2 uint32 = 0
const Default_CONFIG_UI_XPBoost_CheckTime float32 = 0
const Default_CONFIG_ExchangeCost uint32 = 0
const Default_CONFIG_BasicPvpTimer uint32 = 0
const Default_CONFIG_TPvPDailyLimit uint32 = 0
const Default_CONFIG_BasicPvPDailyLimit uint32 = 0
const Default_CONFIG_BasicPvPRankLvReq uint32 = 0
const Default_CONFIG_TempGiftLvReq uint32 = 0
const Default_CONFIG_DisplayGiftCodeEntrance uint32 = 0
const Default_CONFIG_NaverCafeEntrance uint32 = 0
const Default_CONFIG_PresidentLevelLimit uint32 = 0
const Default_CONFIG_PresidentVIPLimit uint32 = 0
const Default_CONFIG_GuildFondSC uint32 = 0
const Default_CONFIG_GuildFondHC uint32 = 0
const Default_CONFIG_GuildBagRoom uint32 = 0
const Default_CONFIG_GuildApplicationNumberLimit uint32 = 0
const Default_CONFIG_GuildEXDailyLimit uint32 = 0
const Default_CONFIG_GuildEXLimit uint32 = 0
const Default_CONFIG_GuildNumberLevelLimit uint32 = 0
const Default_CONFIG_ManagementNumber uint32 = 0
const Default_CONFIG_GuildApplicationTimeLimit uint32 = 0
const Default_CONFIG_GuildApplyNumLimit uint32 = 0
const Default_CONFIG_GuildApplyTimeLimit uint32 = 0
const Default_CONFIG_InventoryCap uint32 = 0
const Default_CONFIG_TrialCDTimeCostHC uint32 = 0
const Default_CONFIG_PvpDmgRate float32 = 0.4
const Default_CONFIG_TPvpDmgRate float32 = 0.4
const Default_CONFIG_WSPvpDmgRate float32 = 0.4
const Default_CONFIG_ExpeditionDmgRate float32 = 0.4
const Default_CONFIG_RobCropsDmgRate float32 = 0.4
const Default_CONFIG_DangerAlertRate float32 = 0
const Default_CONFIG_DeathAlertRate float32 = 0
const Default_CONFIG_TPVPUnit uint32 = 0
const Default_CONFIG_JadeLimit uint32 = 0
const Default_CONFIG_PosterTime uint32 = 0
const Default_CONFIG_SPPosterTime uint32 = 0
const Default_CONFIG_HCPerEggKey uint32 = 0
const Default_CONFIG_GrowFundCost uint32 = 0
const Default_CONFIG_DestinyCountinu uint32 = 0
const Default_CONFIG_GVEADTime uint32 = 0
const Default_CONFIG_BaoZiGetLimit uint32 = 0
const Default_CONFIG_BaoZiUnit uint32 = 0
const Default_CONFIG_TrailGSLevelGap float32 = 0
const Default_CONFIG_TrailGSLevelNum uint32 = 0
const Default_CONFIG_TrailGSLevelCon uint32 = 0
const Default_CONFIG_BagApplyTime uint32 = 0
const Default_CONFIG_MoneyGodMsgNL uint32 = 0
const Default_CONFIG_ShowGuildWar uint32 = 0
const Default_CONFIG_BaseDmgLimitRatio float32 = 0
const Default_CONFIG_BaseDmgRandomLowerRatio float32 = 0
const Default_CONFIG_BaseDmgUpperRatio float32 = 0
const Default_CONFIG_REDPACKETLIMIT uint32 = 0
const Default_CONFIG_DisplayHeroClubEntrance uint32 = 0
const Default_CONFIG_GuildLogLimit uint32 = 0
const Default_CONFIG_ReserveDays uint32 = 0
const Default_CONFIG_ReceiveDay uint32 = 0
const Default_CONFIG_RedpackeTratio uint32 = 0
const Default_CONFIG_FollowUpRewardCount uint32 = 0
const Default_CONFIG_FriendInviteRewardCount uint32 = 0
const Default_CONFIG_FTESkip uint32 = 0
const Default_CONFIG_IAP_PurchurseCD uint32 = 0
const Default_CONFIG_RepairSignCost uint32 = 0
const Default_CONFIG_RecoverDayLimit uint32 = 0
const Default_CONFIG_RecoverLevel uint32 = 0

func (m *CONFIG) GetStdid() uint32 {
	if m != nil && m.Stdid != nil {
		return *m.Stdid
	}
	return Default_CONFIG_Stdid
}

func (m *CONFIG) GetEnergyRecover() uint32 {
	if m != nil && m.EnergyRecover != nil {
		return *m.EnergyRecover
	}
	return Default_CONFIG_EnergyRecover
}

func (m *CONFIG) GetMaxEnergy() uint32 {
	if m != nil && m.MaxEnergy != nil {
		return *m.MaxEnergy
	}
	return Default_CONFIG_MaxEnergy
}

func (m *CONFIG) GetMultiHitConstant() float32 {
	if m != nil && m.MultiHitConstant != nil {
		return *m.MultiHitConstant
	}
	return Default_CONFIG_MultiHitConstant
}

func (m *CONFIG) GetGoodWillDivide() uint32 {
	if m != nil && m.GoodWillDivide != nil {
		return *m.GoodWillDivide
	}
	return Default_CONFIG_GoodWillDivide
}

func (m *CONFIG) GetEnergyUnit() uint32 {
	if m != nil && m.EnergyUnit != nil {
		return *m.EnergyUnit
	}
	return Default_CONFIG_EnergyUnit
}

func (m *CONFIG) GetSCUnit() uint32 {
	if m != nil && m.SCUnit != nil {
		return *m.SCUnit
	}
	return Default_CONFIG_SCUnit
}

func (m *CONFIG) GetSPIRIT_BONUS_PREFER() float32 {
	if m != nil && m.SPIRIT_BONUS_PREFER != nil {
		return *m.SPIRIT_BONUS_PREFER
	}
	return Default_CONFIG_SPIRIT_BONUS_PREFER
}

func (m *CONFIG) GetSPIRIT_BONUS_NORMAL() float32 {
	if m != nil && m.SPIRIT_BONUS_NORMAL != nil {
		return *m.SPIRIT_BONUS_NORMAL
	}
	return Default_CONFIG_SPIRIT_BONUS_NORMAL
}

func (m *CONFIG) GetPVEBOSS_TASK_TIME() string {
	if m != nil && m.PVEBOSS_TASK_TIME != nil {
		return *m.PVEBOSS_TASK_TIME
	}
	return ""
}

func (m *CONFIG) GetPVEBOSS_PN_TIME() string {
	if m != nil && m.PVEBOSS_PN_TIME != nil {
		return *m.PVEBOSS_PN_TIME
	}
	return ""
}

func (m *CONFIG) GetBreakfastTime() string {
	if m != nil && m.BreakfastTime != nil {
		return *m.BreakfastTime
	}
	return ""
}

func (m *CONFIG) GetLunchTime() string {
	if m != nil && m.LunchTime != nil {
		return *m.LunchTime
	}
	return ""
}

func (m *CONFIG) GetDinnerTime() string {
	if m != nil && m.DinnerTime != nil {
		return *m.DinnerTime
	}
	return ""
}

func (m *CONFIG) GetNightSnackTime() string {
	if m != nil && m.NightSnackTime != nil {
		return *m.NightSnackTime
	}
	return ""
}

func (m *CONFIG) GetMondayGiftPush1() string {
	if m != nil && m.MondayGiftPush1 != nil {
		return *m.MondayGiftPush1
	}
	return ""
}

func (m *CONFIG) GetMondayGiftPush2() string {
	if m != nil && m.MondayGiftPush2 != nil {
		return *m.MondayGiftPush2
	}
	return ""
}

func (m *CONFIG) GetSprintUnit() uint32 {
	if m != nil && m.SprintUnit != nil {
		return *m.SprintUnit
	}
	return Default_CONFIG_SprintUnit
}

func (m *CONFIG) GetSpiritRecover() uint32 {
	if m != nil && m.SpiritRecover != nil {
		return *m.SpiritRecover
	}
	return Default_CONFIG_SpiritRecover
}

func (m *CONFIG) GetMaxSpirit() uint32 {
	if m != nil && m.MaxSpirit != nil {
		return *m.MaxSpirit
	}
	return Default_CONFIG_MaxSpirit
}

func (m *CONFIG) GetCorpLevelUpperLimit() uint32 {
	if m != nil && m.CorpLevelUpperLimit != nil {
		return *m.CorpLevelUpperLimit
	}
	return Default_CONFIG_CorpLevelUpperLimit
}

func (m *CONFIG) GetAbstractCancel() uint32 {
	if m != nil && m.AbstractCancel != nil {
		return *m.AbstractCancel
	}
	return Default_CONFIG_AbstractCancel
}

func (m *CONFIG) GetUI_Loading_Feedback_1() uint32 {
	if m != nil && m.UI_Loading_Feedback_1 != nil {
		return *m.UI_Loading_Feedback_1
	}
	return Default_CONFIG_UI_Loading_Feedback_1
}

func (m *CONFIG) GetUI_Loading_Feedback_2() uint32 {
	if m != nil && m.UI_Loading_Feedback_2 != nil {
		return *m.UI_Loading_Feedback_2
	}
	return Default_CONFIG_UI_Loading_Feedback_2
}

func (m *CONFIG) GetUI_XPBoost_CheckTime() float32 {
	if m != nil && m.UI_XPBoost_CheckTime != nil {
		return *m.UI_XPBoost_CheckTime
	}
	return Default_CONFIG_UI_XPBoost_CheckTime
}

func (m *CONFIG) GetExchangeCost() uint32 {
	if m != nil && m.ExchangeCost != nil {
		return *m.ExchangeCost
	}
	return Default_CONFIG_ExchangeCost
}

func (m *CONFIG) GetBasicPvpTimer() uint32 {
	if m != nil && m.BasicPvpTimer != nil {
		return *m.BasicPvpTimer
	}
	return Default_CONFIG_BasicPvpTimer
}

func (m *CONFIG) GetTPvPDailyLimit() uint32 {
	if m != nil && m.TPvPDailyLimit != nil {
		return *m.TPvPDailyLimit
	}
	return Default_CONFIG_TPvPDailyLimit
}

func (m *CONFIG) GetBasicPvPDailyLimit() uint32 {
	if m != nil && m.BasicPvPDailyLimit != nil {
		return *m.BasicPvPDailyLimit
	}
	return Default_CONFIG_BasicPvPDailyLimit
}

func (m *CONFIG) GetBasicPvPRankLvReq() uint32 {
	if m != nil && m.BasicPvPRankLvReq != nil {
		return *m.BasicPvPRankLvReq
	}
	return Default_CONFIG_BasicPvPRankLvReq
}

func (m *CONFIG) GetTempGiftLvReq() uint32 {
	if m != nil && m.TempGiftLvReq != nil {
		return *m.TempGiftLvReq
	}
	return Default_CONFIG_TempGiftLvReq
}

func (m *CONFIG) GetDisplayGiftCodeEntrance() uint32 {
	if m != nil && m.DisplayGiftCodeEntrance != nil {
		return *m.DisplayGiftCodeEntrance
	}
	return Default_CONFIG_DisplayGiftCodeEntrance
}

func (m *CONFIG) GetNaverCafeEntrance() uint32 {
	if m != nil && m.NaverCafeEntrance != nil {
		return *m.NaverCafeEntrance
	}
	return Default_CONFIG_NaverCafeEntrance
}

func (m *CONFIG) GetPresidentLevelLimit() uint32 {
	if m != nil && m.PresidentLevelLimit != nil {
		return *m.PresidentLevelLimit
	}
	return Default_CONFIG_PresidentLevelLimit
}

func (m *CONFIG) GetPresidentVIPLimit() uint32 {
	if m != nil && m.PresidentVIPLimit != nil {
		return *m.PresidentVIPLimit
	}
	return Default_CONFIG_PresidentVIPLimit
}

func (m *CONFIG) GetGuildFondSC() uint32 {
	if m != nil && m.GuildFondSC != nil {
		return *m.GuildFondSC
	}
	return Default_CONFIG_GuildFondSC
}

func (m *CONFIG) GetGuildFondHC() uint32 {
	if m != nil && m.GuildFondHC != nil {
		return *m.GuildFondHC
	}
	return Default_CONFIG_GuildFondHC
}

func (m *CONFIG) GetGuildBagRoom() uint32 {
	if m != nil && m.GuildBagRoom != nil {
		return *m.GuildBagRoom
	}
	return Default_CONFIG_GuildBagRoom
}

func (m *CONFIG) GetGuildApplicationNumberLimit() uint32 {
	if m != nil && m.GuildApplicationNumberLimit != nil {
		return *m.GuildApplicationNumberLimit
	}
	return Default_CONFIG_GuildApplicationNumberLimit
}

func (m *CONFIG) GetGuildEXDailyLimit() uint32 {
	if m != nil && m.GuildEXDailyLimit != nil {
		return *m.GuildEXDailyLimit
	}
	return Default_CONFIG_GuildEXDailyLimit
}

func (m *CONFIG) GetGuildEXLimit() uint32 {
	if m != nil && m.GuildEXLimit != nil {
		return *m.GuildEXLimit
	}
	return Default_CONFIG_GuildEXLimit
}

func (m *CONFIG) GetGuildNumberLevelLimit() uint32 {
	if m != nil && m.GuildNumberLevelLimit != nil {
		return *m.GuildNumberLevelLimit
	}
	return Default_CONFIG_GuildNumberLevelLimit
}

func (m *CONFIG) GetManagementNumber() uint32 {
	if m != nil && m.ManagementNumber != nil {
		return *m.ManagementNumber
	}
	return Default_CONFIG_ManagementNumber
}

func (m *CONFIG) GetGuildApplicationTimeLimit() uint32 {
	if m != nil && m.GuildApplicationTimeLimit != nil {
		return *m.GuildApplicationTimeLimit
	}
	return Default_CONFIG_GuildApplicationTimeLimit
}

func (m *CONFIG) GetGuildApplyNumLimit() uint32 {
	if m != nil && m.GuildApplyNumLimit != nil {
		return *m.GuildApplyNumLimit
	}
	return Default_CONFIG_GuildApplyNumLimit
}

func (m *CONFIG) GetGuildApplyTimeLimit() uint32 {
	if m != nil && m.GuildApplyTimeLimit != nil {
		return *m.GuildApplyTimeLimit
	}
	return Default_CONFIG_GuildApplyTimeLimit
}

func (m *CONFIG) GetLevelUnlockOtherRoles() string {
	if m != nil && m.LevelUnlockOtherRoles != nil {
		return *m.LevelUnlockOtherRoles
	}
	return ""
}

func (m *CONFIG) GetInventoryCap() uint32 {
	if m != nil && m.InventoryCap != nil {
		return *m.InventoryCap
	}
	return Default_CONFIG_InventoryCap
}

func (m *CONFIG) GetBroadcastAvailableStage() string {
	if m != nil && m.BroadcastAvailableStage != nil {
		return *m.BroadcastAvailableStage
	}
	return ""
}

func (m *CONFIG) GetTrialCDTimeCostHC() uint32 {
	if m != nil && m.TrialCDTimeCostHC != nil {
		return *m.TrialCDTimeCostHC
	}
	return Default_CONFIG_TrialCDTimeCostHC
}

func (m *CONFIG) GetPvpDmgRate() float32 {
	if m != nil && m.PvpDmgRate != nil {
		return *m.PvpDmgRate
	}
	return Default_CONFIG_PvpDmgRate
}

func (m *CONFIG) GetTPvpDmgRate() float32 {
	if m != nil && m.TPvpDmgRate != nil {
		return *m.TPvpDmgRate
	}
	return Default_CONFIG_TPvpDmgRate
}

func (m *CONFIG) GetWSPvpDmgRate() float32 {
	if m != nil && m.WSPvpDmgRate != nil {
		return *m.WSPvpDmgRate
	}
	return Default_CONFIG_WSPvpDmgRate
}

func (m *CONFIG) GetExpeditionDmgRate() float32 {
	if m != nil && m.ExpeditionDmgRate != nil {
		return *m.ExpeditionDmgRate
	}
	return Default_CONFIG_ExpeditionDmgRate
}

func (m *CONFIG) GetRobCropsDmgRate() float32 {
	if m != nil && m.RobCropsDmgRate != nil {
		return *m.RobCropsDmgRate
	}
	return Default_CONFIG_RobCropsDmgRate
}

func (m *CONFIG) GetDangerAlertRate() float32 {
	if m != nil && m.DangerAlertRate != nil {
		return *m.DangerAlertRate
	}
	return Default_CONFIG_DangerAlertRate
}

func (m *CONFIG) GetDeathAlertRate() float32 {
	if m != nil && m.DeathAlertRate != nil {
		return *m.DeathAlertRate
	}
	return Default_CONFIG_DeathAlertRate
}

func (m *CONFIG) GetTPVPUnit() uint32 {
	if m != nil && m.TPVPUnit != nil {
		return *m.TPVPUnit
	}
	return Default_CONFIG_TPVPUnit
}

func (m *CONFIG) GetJadeLimit() uint32 {
	if m != nil && m.JadeLimit != nil {
		return *m.JadeLimit
	}
	return Default_CONFIG_JadeLimit
}

func (m *CONFIG) GetPosterCondition() string {
	if m != nil && m.PosterCondition != nil {
		return *m.PosterCondition
	}
	return ""
}

func (m *CONFIG) GetPosterTime() uint32 {
	if m != nil && m.PosterTime != nil {
		return *m.PosterTime
	}
	return Default_CONFIG_PosterTime
}

func (m *CONFIG) GetSPPosterTime() uint32 {
	if m != nil && m.SPPosterTime != nil {
		return *m.SPPosterTime
	}
	return Default_CONFIG_SPPosterTime
}

func (m *CONFIG) GetHCPerEggKey() uint32 {
	if m != nil && m.HCPerEggKey != nil {
		return *m.HCPerEggKey
	}
	return Default_CONFIG_HCPerEggKey
}

func (m *CONFIG) GetWorshipLoot() string {
	if m != nil && m.WorshipLoot != nil {
		return *m.WorshipLoot
	}
	return ""
}

func (m *CONFIG) GetGrowFundCost() uint32 {
	if m != nil && m.GrowFundCost != nil {
		return *m.GrowFundCost
	}
	return Default_CONFIG_GrowFundCost
}

func (m *CONFIG) GetDestinyCountinu() uint32 {
	if m != nil && m.DestinyCountinu != nil {
		return *m.DestinyCountinu
	}
	return Default_CONFIG_DestinyCountinu
}

func (m *CONFIG) GetGVEADTime() uint32 {
	if m != nil && m.GVEADTime != nil {
		return *m.GVEADTime
	}
	return Default_CONFIG_GVEADTime
}

func (m *CONFIG) GetBaoZiGetLimit() uint32 {
	if m != nil && m.BaoZiGetLimit != nil {
		return *m.BaoZiGetLimit
	}
	return Default_CONFIG_BaoZiGetLimit
}

func (m *CONFIG) GetBaoZiUnit() uint32 {
	if m != nil && m.BaoZiUnit != nil {
		return *m.BaoZiUnit
	}
	return Default_CONFIG_BaoZiUnit
}

func (m *CONFIG) GetTrailGSLevelGap() float32 {
	if m != nil && m.TrailGSLevelGap != nil {
		return *m.TrailGSLevelGap
	}
	return Default_CONFIG_TrailGSLevelGap
}

func (m *CONFIG) GetTrailGSLevelNum() uint32 {
	if m != nil && m.TrailGSLevelNum != nil {
		return *m.TrailGSLevelNum
	}
	return Default_CONFIG_TrailGSLevelNum
}

func (m *CONFIG) GetTrailGSLevelCon() uint32 {
	if m != nil && m.TrailGSLevelCon != nil {
		return *m.TrailGSLevelCon
	}
	return Default_CONFIG_TrailGSLevelCon
}

func (m *CONFIG) GetBagApplyTime() uint32 {
	if m != nil && m.BagApplyTime != nil {
		return *m.BagApplyTime
	}
	return Default_CONFIG_BagApplyTime
}

func (m *CONFIG) GetMoneyGodMsgNL() uint32 {
	if m != nil && m.MoneyGodMsgNL != nil {
		return *m.MoneyGodMsgNL
	}
	return Default_CONFIG_MoneyGodMsgNL
}

func (m *CONFIG) GetPnTime1V1() string {
	if m != nil && m.PnTime1V1 != nil {
		return *m.PnTime1V1
	}
	return ""
}

func (m *CONFIG) GetPnTime3V3() string {
	if m != nil && m.PnTime3V3 != nil {
		return *m.PnTime3V3
	}
	return ""
}

func (m *CONFIG) GetLevelSuppressPnTime() string {
	if m != nil && m.LevelSuppressPnTime != nil {
		return *m.LevelSuppressPnTime
	}
	return ""
}

func (m *CONFIG) GetTermSysGvePnTime() string {
	if m != nil && m.TermSysGvePnTime != nil {
		return *m.TermSysGvePnTime
	}
	return ""
}

func (m *CONFIG) GetShowGuildWar() uint32 {
	if m != nil && m.ShowGuildWar != nil {
		return *m.ShowGuildWar
	}
	return Default_CONFIG_ShowGuildWar
}

func (m *CONFIG) GetBaseDmgLimitRatio() float32 {
	if m != nil && m.BaseDmgLimitRatio != nil {
		return *m.BaseDmgLimitRatio
	}
	return Default_CONFIG_BaseDmgLimitRatio
}

func (m *CONFIG) GetBaseDmgRandomLowerRatio() float32 {
	if m != nil && m.BaseDmgRandomLowerRatio != nil {
		return *m.BaseDmgRandomLowerRatio
	}
	return Default_CONFIG_BaseDmgRandomLowerRatio
}

func (m *CONFIG) GetBaseDmgUpperRatio() float32 {
	if m != nil && m.BaseDmgUpperRatio != nil {
		return *m.BaseDmgUpperRatio
	}
	return Default_CONFIG_BaseDmgUpperRatio
}

func (m *CONFIG) GetREDPACKETLIMIT() uint32 {
	if m != nil && m.REDPACKETLIMIT != nil {
		return *m.REDPACKETLIMIT
	}
	return Default_CONFIG_REDPACKETLIMIT
}

func (m *CONFIG) GetDisplayHeroClubEntrance() uint32 {
	if m != nil && m.DisplayHeroClubEntrance != nil {
		return *m.DisplayHeroClubEntrance
	}
	return Default_CONFIG_DisplayHeroClubEntrance
}

func (m *CONFIG) GetGuildLogLimit() uint32 {
	if m != nil && m.GuildLogLimit != nil {
		return *m.GuildLogLimit
	}
	return Default_CONFIG_GuildLogLimit
}

func (m *CONFIG) GetReserveDays() uint32 {
	if m != nil && m.ReserveDays != nil {
		return *m.ReserveDays
	}
	return Default_CONFIG_ReserveDays
}

func (m *CONFIG) GetReceiveDay() uint32 {
	if m != nil && m.ReceiveDay != nil {
		return *m.ReceiveDay
	}
	return Default_CONFIG_ReceiveDay
}

func (m *CONFIG) GetRedpackeTratio() uint32 {
	if m != nil && m.RedpackeTratio != nil {
		return *m.RedpackeTratio
	}
	return Default_CONFIG_RedpackeTratio
}

func (m *CONFIG) GetFollowUpReward() string {
	if m != nil && m.FollowUpReward != nil {
		return *m.FollowUpReward
	}
	return ""
}

func (m *CONFIG) GetFollowUpRewardCount() uint32 {
	if m != nil && m.FollowUpRewardCount != nil {
		return *m.FollowUpRewardCount
	}
	return Default_CONFIG_FollowUpRewardCount
}

func (m *CONFIG) GetFriendInviteReward() string {
	if m != nil && m.FriendInviteReward != nil {
		return *m.FriendInviteReward
	}
	return ""
}

func (m *CONFIG) GetFriendInviteRewardCount() uint32 {
	if m != nil && m.FriendInviteRewardCount != nil {
		return *m.FriendInviteRewardCount
	}
	return Default_CONFIG_FriendInviteRewardCount
}

func (m *CONFIG) GetFTESkip() uint32 {
	if m != nil && m.FTESkip != nil {
		return *m.FTESkip
	}
	return Default_CONFIG_FTESkip
}

func (m *CONFIG) GetIAP_PurchurseCD() uint32 {
	if m != nil && m.IAP_PurchurseCD != nil {
		return *m.IAP_PurchurseCD
	}
	return Default_CONFIG_IAP_PurchurseCD
}

func (m *CONFIG) GetRepairSignCost() uint32 {
	if m != nil && m.RepairSignCost != nil {
		return *m.RepairSignCost
	}
	return Default_CONFIG_RepairSignCost
}

func (m *CONFIG) GetRepairSignCoin() string {
	if m != nil && m.RepairSignCoin != nil {
		return *m.RepairSignCoin
	}
	return ""
}

func (m *CONFIG) GetRecoverDayLimit() uint32 {
	if m != nil && m.RecoverDayLimit != nil {
		return *m.RecoverDayLimit
	}
	return Default_CONFIG_RecoverDayLimit
}

func (m *CONFIG) GetRecoverLevel() uint32 {
	if m != nil && m.RecoverLevel != nil {
		return *m.RecoverLevel
	}
	return Default_CONFIG_RecoverLevel
}

func (m *CONFIG) GetWorldBossSoonEnd() string {
	if m != nil && m.WorldBossSoonEnd != nil {
		return *m.WorldBossSoonEnd
	}
	return ""
}

func (m *CONFIG) GetWheelPPTime() string {
	if m != nil && m.WheelPPTime != nil {
		return *m.WheelPPTime
	}
	return ""
}

type CONFIG_ARRAY struct {
	Items            []*CONFIG `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *CONFIG_ARRAY) Reset()         { *m = CONFIG_ARRAY{} }
func (m *CONFIG_ARRAY) String() string { return proto.CompactTextString(m) }
func (*CONFIG_ARRAY) ProtoMessage()    {}

func (m *CONFIG_ARRAY) GetItems() []*CONFIG {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
}
