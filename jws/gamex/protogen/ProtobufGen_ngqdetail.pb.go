// Code generated by protoc-gen-go.
// source: ProtobufGen_ngqdetail.proto
// DO NOT EDIT!

package ProtobufGen

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type NGQDETAIL struct {
	// * 副将任务ID
	NGQID *string `protobuf:"bytes,1,req,def=" json:"NGQID,omitempty"`
	// * 副将任务类型
	NGQType *uint32 `protobuf:"varint,2,opt,def=0" json:"NGQType,omitempty"`
	// * 任务品质
	RareLevel *uint32 `protobuf:"varint,3,opt,def=0" json:"RareLevel,omitempty"`
	// * 副将数量要求限制
	GeneralCountRequired *uint32 `protobuf:"varint,4,opt,def=0" json:"GeneralCountRequired,omitempty"`
	// * 完成条件类型
	FCType *uint32 `protobuf:"varint,5,opt,def=0" json:"FCType,omitempty"`
	// * 完成条件数值参数1
	FCValueIP1 *uint32 `protobuf:"varint,6,opt,def=1" json:"FCValueIP1,omitempty"`
	// * 完成条件数值参数2
	FCValueIP2 *uint32 `protobuf:"varint,7,opt,def=0" json:"FCValueIP2,omitempty"`
	// * 完成条件字符串参数1
	FCValueSP1 *string `protobuf:"bytes,8,opt,def=" json:"FCValueSP1,omitempty"`
	// * 完成条件字符串参数2
	FCValueSP2 *string `protobuf:"bytes,9,opt,def=" json:"FCValueSP2,omitempty"`
	// * 副将品质限制
	RareLimit *uint32 `protobuf:"varint,10,opt,def=0" json:"RareLimit,omitempty"`
	// * 完成时限（单位：m）
	FinishTime *uint32 `protobuf:"varint,11,opt,def=0" json:"FinishTime,omitempty"`
	// * 快速完成价格
	QuickFinishPrice *uint32 `protobuf:"varint,12,opt,def=0" json:"QuickFinishPrice,omitempty"`
	// * 任务名称
	NGQName *string `protobuf:"bytes,13,opt,def=" json:"NGQName,omitempty"`
	// * 加成类型
	BonusType         *uint32               `protobuf:"varint,14,opt,def=0" json:"BonusType,omitempty"`
	NGQAward_Template []*NGQDETAIL_NGQAward `protobuf:"bytes,15,rep" json:"NGQAward_Template,omitempty"`
	XXX_unrecognized  []byte                `json:"-"`
}

func (m *NGQDETAIL) Reset()         { *m = NGQDETAIL{} }
func (m *NGQDETAIL) String() string { return proto.CompactTextString(m) }
func (*NGQDETAIL) ProtoMessage()    {}

const Default_NGQDETAIL_NGQType uint32 = 0
const Default_NGQDETAIL_RareLevel uint32 = 0
const Default_NGQDETAIL_GeneralCountRequired uint32 = 0
const Default_NGQDETAIL_FCType uint32 = 0
const Default_NGQDETAIL_FCValueIP1 uint32 = 1
const Default_NGQDETAIL_FCValueIP2 uint32 = 0
const Default_NGQDETAIL_RareLimit uint32 = 0
const Default_NGQDETAIL_FinishTime uint32 = 0
const Default_NGQDETAIL_QuickFinishPrice uint32 = 0
const Default_NGQDETAIL_BonusType uint32 = 0

func (m *NGQDETAIL) GetNGQID() string {
	if m != nil && m.NGQID != nil {
		return *m.NGQID
	}
	return ""
}

func (m *NGQDETAIL) GetNGQType() uint32 {
	if m != nil && m.NGQType != nil {
		return *m.NGQType
	}
	return Default_NGQDETAIL_NGQType
}

func (m *NGQDETAIL) GetRareLevel() uint32 {
	if m != nil && m.RareLevel != nil {
		return *m.RareLevel
	}
	return Default_NGQDETAIL_RareLevel
}

func (m *NGQDETAIL) GetGeneralCountRequired() uint32 {
	if m != nil && m.GeneralCountRequired != nil {
		return *m.GeneralCountRequired
	}
	return Default_NGQDETAIL_GeneralCountRequired
}

func (m *NGQDETAIL) GetFCType() uint32 {
	if m != nil && m.FCType != nil {
		return *m.FCType
	}
	return Default_NGQDETAIL_FCType
}

func (m *NGQDETAIL) GetFCValueIP1() uint32 {
	if m != nil && m.FCValueIP1 != nil {
		return *m.FCValueIP1
	}
	return Default_NGQDETAIL_FCValueIP1
}

func (m *NGQDETAIL) GetFCValueIP2() uint32 {
	if m != nil && m.FCValueIP2 != nil {
		return *m.FCValueIP2
	}
	return Default_NGQDETAIL_FCValueIP2
}

func (m *NGQDETAIL) GetFCValueSP1() string {
	if m != nil && m.FCValueSP1 != nil {
		return *m.FCValueSP1
	}
	return ""
}

func (m *NGQDETAIL) GetFCValueSP2() string {
	if m != nil && m.FCValueSP2 != nil {
		return *m.FCValueSP2
	}
	return ""
}

func (m *NGQDETAIL) GetRareLimit() uint32 {
	if m != nil && m.RareLimit != nil {
		return *m.RareLimit
	}
	return Default_NGQDETAIL_RareLimit
}

func (m *NGQDETAIL) GetFinishTime() uint32 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return Default_NGQDETAIL_FinishTime
}

func (m *NGQDETAIL) GetQuickFinishPrice() uint32 {
	if m != nil && m.QuickFinishPrice != nil {
		return *m.QuickFinishPrice
	}
	return Default_NGQDETAIL_QuickFinishPrice
}

func (m *NGQDETAIL) GetNGQName() string {
	if m != nil && m.NGQName != nil {
		return *m.NGQName
	}
	return ""
}

func (m *NGQDETAIL) GetBonusType() uint32 {
	if m != nil && m.BonusType != nil {
		return *m.BonusType
	}
	return Default_NGQDETAIL_BonusType
}

func (m *NGQDETAIL) GetNGQAward_Template() []*NGQDETAIL_NGQAward {
	if m != nil {
		return m.NGQAward_Template
	}
	return nil
}

type NGQDETAIL_NGQAward struct {
	// * 奖励的道具
	AwardItem *string `protobuf:"bytes,1,opt,def=" json:"AwardItem,omitempty"`
	// * 奖励的数量
	AwardCount *uint32 `protobuf:"varint,2,opt,def=0" json:"AwardCount,omitempty"`
	// * 是否受到加成
	CanBeBonus       *uint32 `protobuf:"varint,3,opt,def=0" json:"CanBeBonus,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NGQDETAIL_NGQAward) Reset()         { *m = NGQDETAIL_NGQAward{} }
func (m *NGQDETAIL_NGQAward) String() string { return proto.CompactTextString(m) }
func (*NGQDETAIL_NGQAward) ProtoMessage()    {}

const Default_NGQDETAIL_NGQAward_AwardCount uint32 = 0
const Default_NGQDETAIL_NGQAward_CanBeBonus uint32 = 0

func (m *NGQDETAIL_NGQAward) GetAwardItem() string {
	if m != nil && m.AwardItem != nil {
		return *m.AwardItem
	}
	return ""
}

func (m *NGQDETAIL_NGQAward) GetAwardCount() uint32 {
	if m != nil && m.AwardCount != nil {
		return *m.AwardCount
	}
	return Default_NGQDETAIL_NGQAward_AwardCount
}

func (m *NGQDETAIL_NGQAward) GetCanBeBonus() uint32 {
	if m != nil && m.CanBeBonus != nil {
		return *m.CanBeBonus
	}
	return Default_NGQDETAIL_NGQAward_CanBeBonus
}

type NGQDETAIL_ARRAY struct {
	Items            []*NGQDETAIL `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *NGQDETAIL_ARRAY) Reset()         { *m = NGQDETAIL_ARRAY{} }
func (m *NGQDETAIL_ARRAY) String() string { return proto.CompactTextString(m) }
func (*NGQDETAIL_ARRAY) ProtoMessage()    {}

func (m *NGQDETAIL_ARRAY) GetItems() []*NGQDETAIL {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
}
