// Code generated by codecgen - DO NOT EDIT.

package client

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
	"time"
)

const (
	// ----- content types ----
	codecSelferCcUTF81819 = 1
	codecSelferCcRAW1819  = 255
	// ----- value types used ----
	codecSelferValueTypeArray1819  = 10
	codecSelferValueTypeMap1819    = 9
	codecSelferValueTypeString1819 = 6
	codecSelferValueTypeInt1819    = 2
	codecSelferValueTypeUint1819   = 3
	codecSelferValueTypeFloat1819  = 4
	codecSelferBitsize1819         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct1819 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1819 struct{}

func codecSelfer1819False() bool { return false }

func init() {
	if codec1978.GenVersion != 12 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic("codecgen version mismatch: current: 12, need " + ver + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ byte
		var _ time.Time
	}
}

func (x *Response) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyn4 bool = x.Node == nil
			var yyn5 bool = x.PrevNode == nil
			if yyr2 || yy2arr2 {
				z.EncWriteArrayStart(3)
				z.EncWriteArrayElem()
				if z.EncBasicHandle().StringToRaw {
					r.EncodeStringBytesRaw(z.BytesView(string(x.Action)))
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, string(x.Action))
				}
				if yyn4 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					x.Node.CodecEncodeSelf(e)
				}
				if yyn5 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					x.PrevNode.CodecEncodeSelf(e)
				}
				z.EncWriteArrayEnd()
			} else {
				z.EncWriteMapStart(3)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"action\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, `action`)
				}
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().StringToRaw {
					r.EncodeStringBytesRaw(z.BytesView(string(x.Action)))
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, string(x.Action))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"node\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, `node`)
				}
				z.EncWriteMapElemValue()
				if yyn4 {
					r.EncodeNil()
				} else {
					x.Node.CodecEncodeSelf(e)
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"prevNode\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, `prevNode`)
				}
				z.EncWriteMapElemValue()
				if yyn5 {
					r.EncodeNil()
				} else {
					x.PrevNode.CodecEncodeSelf(e)
				}
				z.EncWriteMapEnd()
			}
		}
	}
}

func (x *Response) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1819 {
			yyl2 := z.DecReadMapStart()
			if yyl2 == 0 {
				z.DecReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1819 {
			yyl2 := z.DecReadArrayStart()
			if yyl2 == 0 {
				z.DecReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1819)
		}
	}
}

func (x *Response) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "action":
			if r.TryDecodeAsNil() {
				x.Action = ""
			} else {
				x.Action = (string)(r.DecodeString())
			}
		case "node":
			if r.TryDecodeAsNil() {
				if x.Node != nil { // remove the if-true
					x.Node = nil
				}
			} else {
				if x.Node == nil {
					x.Node = new(Node)
				}

				x.Node.CodecDecodeSelf(d)
			}
		case "prevNode":
			if r.TryDecodeAsNil() {
				if x.PrevNode != nil { // remove the if-true
					x.PrevNode = nil
				}
			} else {
				if x.PrevNode == nil {
					x.PrevNode = new(Node)
				}

				x.PrevNode.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecReadMapEnd()
}

func (x *Response) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Action = ""
	} else {
		x.Action = (string)(r.DecodeString())
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.Node != nil { // remove the if-true
			x.Node = nil
		}
	} else {
		if x.Node == nil {
			x.Node = new(Node)
		}

		x.Node.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.PrevNode != nil { // remove the if-true
			x.PrevNode = nil
		}
	} else {
		if x.PrevNode == nil {
			x.PrevNode = new(Node)
		}

		x.PrevNode.CodecDecodeSelf(d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecReadArrayEnd()
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [8]bool{     // should field at this index be written?
				true,                // Key
				x.Dir,               // Dir
				true,                // Value
				true,                // Nodes
				true,                // CreatedIndex
				true,                // ModifiedIndex
				x.Expiration != nil, // Expiration
				x.TTL != 0,          // TTL
			}
			_ = yyq2
			var yyn9 bool = x.Expiration == nil
			if yyr2 || yy2arr2 {
				z.EncWriteArrayStart(8)
				z.EncWriteArrayElem()
				if z.EncBasicHandle().StringToRaw {
					r.EncodeStringBytesRaw(z.BytesView(string(x.Key)))
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, string(x.Key))
				}
				z.EncWriteArrayElem()
				if yyq2[1] {
					r.EncodeBool(bool(x.Dir))
				} else {
					r.EncodeBool(false)
				}
				z.EncWriteArrayElem()
				if z.EncBasicHandle().StringToRaw {
					r.EncodeStringBytesRaw(z.BytesView(string(x.Value)))
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, string(x.Value))
				}
				z.EncWriteArrayElem()
				x.Nodes.CodecEncodeSelf(e)
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.CreatedIndex))
				z.EncWriteArrayElem()
				r.EncodeUint(uint64(x.ModifiedIndex))
				if yyn9 {
					z.EncWriteArrayElem()
					r.EncodeNil()
				} else {
					z.EncWriteArrayElem()
					if yyq2[6] {
						yy17 := *x.Expiration
						if !z.EncBasicHandle().TimeNotBuiltin {
							r.EncodeTime(yy17)
						} else if yyxt18 := z.Extension(z.I2Rtid(yy17)); yyxt18 != nil {
							z.EncExtension(yy17, yyxt18)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(yy17)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(yy17)
						} else {
							z.EncFallback(yy17)
						}
					} else {
						r.EncodeNil()
					}
				}
				z.EncWriteArrayElem()
				if yyq2[7] {
					r.EncodeInt(int64(x.TTL))
				} else {
					r.EncodeInt(0)
				}
				z.EncWriteArrayEnd()
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				z.EncWriteMapStart(yynn2)
				yynn2 = 0
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"key\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, `key`)
				}
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().StringToRaw {
					r.EncodeStringBytesRaw(z.BytesView(string(x.Key)))
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, string(x.Key))
				}
				if yyq2[1] {
					z.EncWriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"dir\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81819, `dir`)
					}
					z.EncWriteMapElemValue()
					r.EncodeBool(bool(x.Dir))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"value\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, `value`)
				}
				z.EncWriteMapElemValue()
				if z.EncBasicHandle().StringToRaw {
					r.EncodeStringBytesRaw(z.BytesView(string(x.Value)))
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, string(x.Value))
				}
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"nodes\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, `nodes`)
				}
				z.EncWriteMapElemValue()
				x.Nodes.CodecEncodeSelf(e)
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"createdIndex\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, `createdIndex`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.CreatedIndex))
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"modifiedIndex\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF81819, `modifiedIndex`)
				}
				z.EncWriteMapElemValue()
				r.EncodeUint(uint64(x.ModifiedIndex))
				if yyq2[6] {
					z.EncWriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"expiration\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81819, `expiration`)
					}
					z.EncWriteMapElemValue()
					if yyn9 {
						r.EncodeNil()
					} else {
						yy26 := *x.Expiration
						if !z.EncBasicHandle().TimeNotBuiltin {
							r.EncodeTime(yy26)
						} else if yyxt27 := z.Extension(z.I2Rtid(yy26)); yyxt27 != nil {
							z.EncExtension(yy26, yyxt27)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(yy26)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(yy26)
						} else {
							z.EncFallback(yy26)
						}
					}
				}
				if yyq2[7] {
					z.EncWriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"ttl\"")
					} else {
						r.EncodeStringEnc(codecSelferCcUTF81819, `ttl`)
					}
					z.EncWriteMapElemValue()
					r.EncodeInt(int64(x.TTL))
				}
				z.EncWriteMapEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1819 {
			yyl2 := z.DecReadMapStart()
			if yyl2 == 0 {
				z.DecReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1819 {
			yyl2 := z.DecReadArrayStart()
			if yyl2 == 0 {
				z.DecReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1819)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = (string)(r.DecodeString())
			}
		case "dir":
			if r.TryDecodeAsNil() {
				x.Dir = false
			} else {
				x.Dir = (bool)(r.DecodeBool())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = (string)(r.DecodeString())
			}
		case "nodes":
			if r.TryDecodeAsNil() {
				x.Nodes = nil
			} else {
				x.Nodes.CodecDecodeSelf(d)
			}
		case "createdIndex":
			if r.TryDecodeAsNil() {
				x.CreatedIndex = 0
			} else {
				x.CreatedIndex = (uint64)(r.DecodeUint64())
			}
		case "modifiedIndex":
			if r.TryDecodeAsNil() {
				x.ModifiedIndex = 0
			} else {
				x.ModifiedIndex = (uint64)(r.DecodeUint64())
			}
		case "expiration":
			if r.TryDecodeAsNil() {
				if x.Expiration != nil { // remove the if-true
					x.Expiration = nil
				}
			} else {
				if x.Expiration == nil {
					x.Expiration = new(time.Time)
				}

				if !z.DecBasicHandle().TimeNotBuiltin {
					*x.Expiration = r.DecodeTime()
				} else if yyxt11 := z.Extension(z.I2Rtid(x.Expiration)); yyxt11 != nil {
					z.DecExtension(x.Expiration, yyxt11)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.Expiration)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Expiration)
				} else {
					z.DecFallback(x.Expiration, false)
				}
			}
		case "ttl":
			if r.TryDecodeAsNil() {
				x.TTL = 0
			} else {
				x.TTL = (int64)(r.DecodeInt64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecReadMapEnd()
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = (string)(r.DecodeString())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Dir = false
	} else {
		x.Dir = (bool)(r.DecodeBool())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = (string)(r.DecodeString())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Nodes = nil
	} else {
		x.Nodes.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CreatedIndex = 0
	} else {
		x.CreatedIndex = (uint64)(r.DecodeUint64())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ModifiedIndex = 0
	} else {
		x.ModifiedIndex = (uint64)(r.DecodeUint64())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.Expiration != nil { // remove the if-true
			x.Expiration = nil
		}
	} else {
		if x.Expiration == nil {
			x.Expiration = new(time.Time)
		}

		if !z.DecBasicHandle().TimeNotBuiltin {
			*x.Expiration = r.DecodeTime()
		} else if yyxt21 := z.Extension(z.I2Rtid(x.Expiration)); yyxt21 != nil {
			z.DecExtension(x.Expiration, yyxt21)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.Expiration)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Expiration)
		} else {
			z.DecFallback(x.Expiration, false)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TTL = 0
	} else {
		x.TTL = (int64)(r.DecodeInt64())
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecReadArrayEnd()
}

func (x Nodes) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			h.encNodes((Nodes)(x), e)
		}
	}
}

func (x *Nodes) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		h.decNodes((*Nodes)(x), d)
	}
}

func (x codecSelfer1819) encNodes(v Nodes, e *codec1978.Encoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer1819) decNodes(v *Nodes, d *codec1978.Decoder) {
	var h codecSelfer1819
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Node{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Node, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*Node, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Node)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*Node, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
